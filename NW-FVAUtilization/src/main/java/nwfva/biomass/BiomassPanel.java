/* http://www.nw-fva.de
   Version 2013-01-13

   (c) 2002 Juergen Nagel, Northwest German Forest Research Station, 
       Grätzelstr.2, 37079 Göttingen, Germany
       E-Mail: Juergen.Nagel@nw-fva.de
 
This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT  WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
 */
package nwfva.biomass;
import java.io.*;
import java.net.*;
import java.text.*;
import java.util.*;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import nwfva.assortment.LoggingSortiment;
import nwfva.assortment.TimeEstimateFunction;
import org.jdom.DocType;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.*;
import treegross.base.*;


/**
 * Panel welches auf den BiomassDialog gelegt werden kann
 * @author J. Nagel
 */
public class BiomassPanel extends javax.swing.JPanel {
    private static final Logger log = Logger.getLogger( nwfva.assortment.NWFVA_Nutzung.class.getName() );

    BiomassSetting nbs[] = new BiomassSetting[50];
    public LoggingSortiment ls[] = new LoggingSortiment[500];
    TimeEstimateFunction tef[] = new TimeEstimateFunction[150];
    BiomassLine nbl[] = new BiomassLine[50];
    BiomassLine nblSt = new BiomassLine();
    javax.swing.table.DefaultTableModel dataNb=null;
    Object[] rowDataNb = null;

    
    int nnbs=0;
    int nls=0;
    int ntef=0;
    int nnbl = 0;
    static Document doc;
    static Element rootElt;
//    String urlString ="file:///C://Dokumente und Einstellungen//nagel//Eigene Dateien//jnProgramme//TreeGrOSSLogging//";
    String urlString ="";
    boolean combo5Active = true;
    Stand st = null;
    String urlcodebase = "";
    javax.swing.DefaultListModel listModel = new javax.swing.DefaultListModel();
    int nlist = 0;
    boolean neuspeichern = false;
    String fname="";
    String proDir;
    boolean dialogActive = true;
    String workDir = "";
    int timeframe = 0;
    double fellingHeight=0.3;
    
/**
 * Konstruktor
 * @param stand TreeGrOSS Bestand
 * @param programDir Programmverzeichnis
 * @param interActive Möglichkeit andere XML-Dateien einzulesen
 * @param workingDir Ausgabeverzeichnis
 */
    public BiomassPanel(Stand stand, String programDir, boolean interActive, String workingDir) {
        initComponents();
        setVisible(true);
        dialogActive = interActive;
        jPanel8.setVisible(interActive);
        st = stand;
        initJTable();
        
 
        proDir=programDir+System.getProperty("file.separator")+"moduls"+System.getProperty("file.separator")+"assortment";
        workDir = workingDir;
        int m = programDir.toUpperCase().indexOf("FILE");
        int m2 = programDir.toUpperCase().indexOf("HTTP");
        String fname=proDir+System.getProperty("file.separator")+st.sortingModul;
        String fname2=proDir+System.getProperty("file.separator")+"EST_Zeiten_Jacke.xml";
        if ( m < 0 && m2 <0 ) fname="file:"+System.getProperty("file.separator")+System.getProperty("file.separator")+System.getProperty("file.separator")+fname;
//        if ( m < 0 && m2 <0 ) fname2="file:"+System.getProperty("file.separator")+System.getProperty("file.separator")+System.getProperty("file.separator")+fname2;
        try{
          URL url = new URL(fname);
          loadls(url);
        }
        catch (IOException e){
            log.info(e.toString());
        }

        proDir=programDir+System.getProperty("file.separator")+"moduls"+System.getProperty("file.separator")+"biomass";
        fname=proDir+System.getProperty("file.separator")+st.biomassModul;
        if ( m < 0 && m2 <0 ) fname="file:"+System.getProperty("file.separator")+System.getProperty("file.separator")+System.getProperty("file.separator")+fname;
        try{
          URL url = new URL(fname);
          loadnbs(url);
        }
        catch (IOException e){
            log.info(e.toString());
        }

        loadTableDf(st);
        loadTableAssortment(st);
        ExcelAdapter myAd1 = new ExcelAdapter(jTable1);
        ExcelAdapter myAd4 = new ExcelAdapter(jTable4);

    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel8 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jTextField13 = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel15 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel14 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel16 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();

        setPreferredSize(new java.awt.Dimension(608, 221));
        setRequestFocusEnabled(false);
        setLayout(new java.awt.BorderLayout());

        jPanel8.setBackground(new java.awt.Color(255, 255, 204));
        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel13.setText("TreeGrOSS xml Datei :");
        jPanel8.add(jLabel13);

        jTextField13.setPreferredSize(new java.awt.Dimension(511, 19));
        jPanel8.add(jTextField13);

        jButton5.setText("laden");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel8.add(jButton5);

        add(jPanel8, java.awt.BorderLayout.NORTH);

        jPanel15.setLayout(new java.awt.BorderLayout());

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Auswahl", "Sortiment", "Arten", "min Zopf", "min Mitt.D", "max Länge"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTable2);

        jPanel15.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Sortimente", jPanel15);

        jPanel14.setLayout(new java.awt.BorderLayout());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Einschlag", "Laubholz m³/ha", "Nadelholz m³/ha", "Sortimente", "Brennholz", "Anteil %", "Restholz", "Anteil %", "Nadel %"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.setCellSelectionEnabled(true);
        jScrollPane1.setViewportView(jTable1);

        jPanel14.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Durchforstungen", jPanel14);

        jPanel16.setLayout(new java.awt.BorderLayout());

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Jahr", "Sortimente  t/ha", "Rinde t/ha", "Brennholz  t/ha", "Rinde t/ha", "Restholz  t/ha", "Rinde t/ha", "Reisig + Blätter t/ha", "Gesamt t/ha"
            }
        ));
        jScrollPane4.setViewportView(jTable3);

        jPanel16.add(jScrollPane4, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Biomasseexport", jPanel16);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Name", "Entnahme ", "Stehender Bestand"
            }
        ));
        jScrollPane2.setViewportView(jTable4);

        jPanel2.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Nährstoffbilanz", jPanel2);

        add(jTabbedPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
       
// TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed
    

     Element addString(Element elt, String variable, String text){
            Element var = new Element(variable);
            var.addContent(text);  
            elt.addContent(var);
            return elt;
    }


/**
 * Berechnung der Biomasse- und Nährstoffe. Das Ergebnis wird in Tabelle 4 des 
 * Panels dargestellt
 */
    public void calculateNutrientBalance(){
        getTableDfSetting();
        getTableAssortments();
        BiomassCalculation biomassCalc = new BiomassCalculation();
        biomassCalc.setAssortments(ls, nls);
        biomassCalc.setBiomassFunctions(nbs, nnbs);

        JSortiererNFV sortierer = new JSortiererNFV(nbs[0].taperFuctionClass);
        FunctionInterpreter fi = new FunctionInterpreter();

            nblSt.sortimentsBM = 0.0;
            nblSt.barksortimentsBM = 0.0;
            nblSt.firewoodBM = 0.0;
            nblSt.barkfirewoodBM = 0.0;
            nblSt.restwoodBM = 0.0;
            nblSt.sumC = 0.0;
            nblSt.sumN = 0.0;
            nblSt.sumS = 0.0;
            nblSt.sumP = 0.0;
            nblSt.sumK = 0.0;
            nblSt.sumCa = 0.0;
            nblSt.sumMg = 0.0;
            nblSt.sumMn = 0.0;
            nblSt.sumFe = 0.0;
            nblSt.sumBOup=0.0;
            nblSt.sumBNO3=0.0;
            nblSt.sumBNH4=0.0;
            nblSt.branchBM = 0.0;
            nblSt.reisigBM = 0.0;
            nblSt.leafBM = 0.0;

        for (int k=0;k<nnbl;k++) {
            nbl[k].sortimentsBM = 0.0;
            nbl[k].barksortimentsBM = 0.0;
            nbl[k].firewoodBM = 0.0;
            nbl[k].barkfirewoodBM = 0.0;
            nbl[k].restwoodBM = 0.0;
            nbl[k].barkrestwoodBM=0.0;
            nbl[k].sumC = 0.0;
            nbl[k].sumN = 0.0;
            nbl[k].sumS = 0.0;
            nbl[k].sumP = 0.0;
            nbl[k].sumK = 0.0;
            nbl[k].sumCa = 0.0;
            nbl[k].sumMg = 0.0;
            nbl[k].sumMn = 0.0;
            nbl[k].sumFe = 0.0;
            nbl[k].sumBOup=0.0;
            nbl[k].sumBNO3=0.0;
            nbl[k].sumBNH4=0.0;
            nbl[k].branchBM = 0.0;
            nbl[k].reisigBM = 0.0;
            nbl[k].leafBM = 0.0;
            BiomassLine tmpbl = nbl[k].clone();
            for (int i=0;i<st.ntrees;i++){
                if ( st.tr[i].out==nbl[k].year && st.tr[i].out>1 && st.tr[i].d >= 7.0) {
// Link species
                    BiomassLine blTree = biomassCalc.getTreesBiomass(st.tr[i], tmpbl);
                    nbl[k].sortimentsBM = nbl[k].sortimentsBM + blTree.sortimentsBM;
                    nbl[k].barksortimentsBM = nbl[k].barksortimentsBM + blTree.barksortimentsBM;
                    nbl[k].firewoodBM = nbl[k].firewoodBM + blTree.firewoodBM;
                    nbl[k].barkfirewoodBM = nbl[k].barkfirewoodBM + blTree.barkfirewoodBM;
                    nbl[k].restwoodBM = nbl[k].restwoodBM + blTree.restwoodBM;
                    nbl[k].barkrestwoodBM=nbl[k].barkrestwoodBM + blTree.barkrestwoodBM;
                    nbl[k].sumC = nbl[k].sumC + blTree.sumC;
                    nbl[k].sumN = nbl[k].sumN + blTree.sumN;
                    nbl[k].sumS = nbl[k].sumS + blTree.sumS;
                    nbl[k].sumP = nbl[k].sumP + blTree.sumP;
                    nbl[k].sumK = nbl[k].sumK + blTree.sumK;
                    nbl[k].sumCa = nbl[k].sumCa + blTree.sumCa;
                    nbl[k].sumMg = nbl[k].sumMg + blTree.sumMg;
                    nbl[k].sumMn = nbl[k].sumMn  + blTree.sumMn;
                    nbl[k].sumFe = nbl[k].sumFe + blTree.sumFe;
                    nbl[k].sumBOup=nbl[k].sumBOup  + blTree.sumBOup;
                    nbl[k].sumBNO3=nbl[k].sumBNO3 + blTree.sumBNO3;
                    nbl[k].sumBNH4=nbl[k].sumBNH4 + blTree.sumBNH4;
                    nbl[k].branchBM = nbl[k].branchBM + blTree.branchBM;
                    nbl[k].reisigBM = nbl[k].reisigBM + blTree.reisigBM;
                    nbl[k].leafBM = nbl[k].leafBM + blTree.leafBM;
        }}}
// Stand nutrients
        for (int i=0;i<st.ntrees;i++){
                if ( st.tr[i].out < 1 && st.tr[i].d >=7) {
                    int nbsindex = -9;
                    for (int ik=0;ik < nnbs;ik++)
                        if (st.tr[i].code == nbs[ik].code) {nbsindex=ik;}
                    if (nbsindex < 0) for (int ik=0;ik < nnbs;ik++) {
                        String codestr = new Integer(st.tr[i].code).toString();
                        if (nbs[ik].specieslist.indexOf(codestr)> -1) {nbsindex=ik;}
                    }
                    if (nbsindex <= -1) log.info("Fehler in Nbs-Einstellung Art "+st.tr[i].code+" nicht definiert");   
                    if (nbsindex > -1){
                     
                    double stemBM = fi.getValueForTree(st.tr[i],nbs[nbsindex].stemBMkg)*st.tr[i].fac/st.size;
                    double barkBM = fi.getValueForTree(st.tr[i],nbs[nbsindex].barkBMkg)*st.tr[i].fac/st.size;
                    double branchBM = fi.getValueForTree(st.tr[i],nbs[nbsindex].branchBMkg)*st.tr[i].fac/st.size;
                    double reisigBM = fi.getValueForTree(st.tr[i],nbs[nbsindex].reisigBMkg)*st.tr[i].fac/st.size;
                    double leafBM = reisigBM * fi.getValueForTree(st.tr[i],nbs[nbsindex].leafBM);
                    reisigBM = reisigBM -leafBM;
//                    double leafBM = reisigBM*0.01*nbs[nbsindex].nbl[k].needlePerc;
                    nblSt.sumC = nblSt.sumC + fi.getValueForTree(st.tr[i], nbs[nbsindex].woodFacC)*stemBM+
                                 fi.getValueForTree(st.tr[i],nbs[nbsindex].barkFacC)*barkBM+
                                 fi.getValueForTree(st.tr[i],nbs[nbsindex].branchFacC)*(branchBM)+
                                 fi.getValueForTree(st.tr[i],nbs[nbsindex].reisigFacC)*(reisigBM)+
                                 fi.getValueForTree(st.tr[i],nbs[nbsindex].leafFacC)*(leafBM);
                    nblSt.sumN = nblSt.sumN + fi.getValueForTree(st.tr[i], nbs[nbsindex].woodFacN)*stemBM+
                                 fi.getValueForTree(st.tr[i],nbs[nbsindex].barkFacN)*barkBM+
                                 fi.getValueForTree(st.tr[i],nbs[nbsindex].branchFacN)*(branchBM)+
                                 fi.getValueForTree(st.tr[i],nbs[nbsindex].reisigFacN)*(reisigBM)+
                                 fi.getValueForTree(st.tr[i],nbs[nbsindex].leafFacN)*(leafBM);
                    nblSt.sumS = nblSt.sumS + fi.getValueForTree(st.tr[i], nbs[nbsindex].woodFacS)*stemBM+
                                 fi.getValueForTree(st.tr[i],nbs[nbsindex].barkFacS)*barkBM+
                                 fi.getValueForTree(st.tr[i],nbs[nbsindex].branchFacS)*(branchBM)+
                                 fi.getValueForTree(st.tr[i],nbs[nbsindex].reisigFacS)*(reisigBM)+
                                 fi.getValueForTree(st.tr[i],nbs[nbsindex].leafFacS)*(leafBM);
                    nblSt.sumP = nblSt.sumP + fi.getValueForTree(st.tr[i], nbs[nbsindex].woodFacP)*stemBM+
                                 fi.getValueForTree(st.tr[i],nbs[nbsindex].barkFacP)*barkBM+
                                 fi.getValueForTree(st.tr[i],nbs[nbsindex].branchFacP)*(branchBM)+
                                 fi.getValueForTree(st.tr[i],nbs[nbsindex].reisigFacP)*(reisigBM)+
                                 fi.getValueForTree(st.tr[i],nbs[nbsindex].leafFacP)*(leafBM);
                    nblSt.sumK = nblSt.sumK + fi.getValueForTree(st.tr[i], nbs[nbsindex].woodFacK)*stemBM+
                                 fi.getValueForTree(st.tr[i],nbs[nbsindex].barkFacK)*barkBM+
                                 fi.getValueForTree(st.tr[i],nbs[nbsindex].branchFacK)*(branchBM)+
                                 fi.getValueForTree(st.tr[i],nbs[nbsindex].reisigFacK)*(reisigBM)+
                                 fi.getValueForTree(st.tr[i],nbs[nbsindex].leafFacK)*(leafBM);
                    nblSt.sumCa = nblSt.sumCa + fi.getValueForTree(st.tr[i], nbs[nbsindex].woodFacCa)*stemBM+
                                 fi.getValueForTree(st.tr[i],nbs[nbsindex].barkFacCa)*barkBM+
                                 fi.getValueForTree(st.tr[i],nbs[nbsindex].branchFacCa)*(branchBM)+
                                 fi.getValueForTree(st.tr[i],nbs[nbsindex].reisigFacCa)*(reisigBM)+
                                 fi.getValueForTree(st.tr[i],nbs[nbsindex].leafFacCa)*(leafBM);
                    nblSt.sumMg = nblSt.sumMg + fi.getValueForTree(st.tr[i], nbs[nbsindex].woodFacMg)*stemBM+
                                 fi.getValueForTree(st.tr[i],nbs[nbsindex].barkFacMg)*barkBM+
                                 fi.getValueForTree(st.tr[i],nbs[nbsindex].branchFacMg)*(branchBM)+
                                 fi.getValueForTree(st.tr[i],nbs[nbsindex].reisigFacMg)*(reisigBM)+
                                 fi.getValueForTree(st.tr[i],nbs[nbsindex].leafFacMg)*(leafBM);
                    nblSt.sumMn = nblSt.sumMn + fi.getValueForTree(st.tr[i], nbs[nbsindex].woodFacMn)*stemBM+
                                 fi.getValueForTree(st.tr[i],nbs[nbsindex].barkFacMn)*barkBM+
                                 fi.getValueForTree(st.tr[i],nbs[nbsindex].branchFacMn)*(branchBM)+
                                 fi.getValueForTree(st.tr[i],nbs[nbsindex].reisigFacMn)*(reisigBM)+
                                 fi.getValueForTree(st.tr[i],nbs[nbsindex].leafFacMn)*(leafBM);
                    nblSt.sumFe = nblSt.sumFe + fi.getValueForTree(st.tr[i], nbs[nbsindex].woodFacFe)*stemBM+
                                 fi.getValueForTree(st.tr[i],nbs[nbsindex].barkFacFe)*barkBM+
                                 fi.getValueForTree(st.tr[i],nbs[nbsindex].branchFacFe)*(branchBM)+
                                 fi.getValueForTree(st.tr[i],nbs[nbsindex].reisigFacFe)*(reisigBM)+
                                 fi.getValueForTree(st.tr[i],nbs[nbsindex].leafFacFe)*(leafBM);
                    nblSt.sumBOup = nblSt.sumBOup + fi.getValueForTree(st.tr[i], nbs[nbsindex].woodFacBOup)*stemBM+
                                 fi.getValueForTree(st.tr[i],nbs[nbsindex].barkFacBOup)*barkBM+
                                 fi.getValueForTree(st.tr[i],nbs[nbsindex].branchFacBOup)*(branchBM)+
                                 fi.getValueForTree(st.tr[i],nbs[nbsindex].reisigFacBOup)*(reisigBM)+
                                 fi.getValueForTree(st.tr[i],nbs[nbsindex].leafFacBOup)*(leafBM);
                    nblSt.sumBNH4 = nblSt.sumBNH4 + fi.getValueForTree(st.tr[i], nbs[nbsindex].woodFacBNH4)*stemBM+
                                 fi.getValueForTree(st.tr[i],nbs[nbsindex].barkFacBNH4)*barkBM+
                                 fi.getValueForTree(st.tr[i],nbs[nbsindex].branchFacBNH4)*(branchBM)+
                                 fi.getValueForTree(st.tr[i],nbs[nbsindex].reisigFacBNH4)*(reisigBM)+
                                 fi.getValueForTree(st.tr[i],nbs[nbsindex].leafFacBNH4)*(leafBM);
                    nblSt.sumBNO3 = nblSt.sumBNO3 + fi.getValueForTree(st.tr[i], nbs[nbsindex].woodFacBNO3)*stemBM+
                                 fi.getValueForTree(st.tr[i],nbs[nbsindex].barkFacBNO3)*barkBM+
                                 fi.getValueForTree(st.tr[i],nbs[nbsindex].branchFacBNO3)*(branchBM)+
                                 fi.getValueForTree(st.tr[i],nbs[nbsindex].reisigFacBNO3)*(reisigBM)+
                                 fi.getValueForTree(st.tr[i],nbs[nbsindex].leafFacBNO3)*(leafBM);
                    }
                    
                }
           }
        
            
    loadTableBM(st);
    loadTableNB(st);

    }

/**
 * Laden der XML-Datei mit den Biomassefunktionen und Nährstoffkonzentrationswerten
 * @param url Url mit xml-Datei
 */
    public void loadnbs(URL url){
        nnbs=0;
        try {
         SAXBuilder builder = new SAXBuilder();
         URLConnection urlcon = url.openConnection();

         Document doc = builder.build(urlcon.getInputStream());

         DocType docType = doc.getDocType();
//
         Element sets =  doc.getRootElement();
         List setList = sets.getChildren("Species");
         Iterator i = setList.iterator();

         while (i.hasNext()) {
            Element set = (Element) i.next();
            String codelist = set.getChild("Specieslist").getText();
            int codex = Integer.parseInt(set.getChild("Code").getText());

            boolean load = false;
            for (int j=0; j < st.nspecies;j++){
                String codestr= new Integer(st.sp[j].code).toString();
                if (codelist.indexOf(codestr)>-1) {
                    load=true;
                    st.sp[j].spDef.internalCode=nnbs;
                }
            }
            if (load) {
                 nbs[nnbs] = new BiomassSetting();
                 nbs[nnbs].code=codex;
                 nbs[nnbs].specieslist=codelist;
                 nbs[nnbs].leafBM=set.getChild("LeafBM").getText();
                 nbs[nnbs].stemBMkg=set.getChild("StemBMkg").getText();
                 nbs[nnbs].barkBMkg=set.getChild("BarkBMkg").getText();
                 nbs[nnbs].branchBMkg=set.getChild("BranchBMkg").getText();
                 nbs[nnbs].reisigBMkg=set.getChild("ReisigBMkg").getText();
                 nbs[nnbs].woodFacC=set.getChild("WoodFacC").getText();
                 nbs[nnbs].woodFacN=set.getChild("WoodFacN").getText();
                 nbs[nnbs].woodFacS=set.getChild("WoodFacS").getText();
                 nbs[nnbs].woodFacP=set.getChild("WoodFacP").getText();
                 nbs[nnbs].woodFacK=set.getChild("WoodFacK").getText();
                 nbs[nnbs].woodFacCa=set.getChild("WoodFacCa").getText();
                 nbs[nnbs].woodFacMg=set.getChild("WoodFacMg").getText();
                 nbs[nnbs].woodFacMn=set.getChild("WoodFacMn").getText();
                 nbs[nnbs].woodFacFe=set.getChild("WoodFacFe").getText();
                 nbs[nnbs].woodFacBOup=set.getChild("WoodFacBOup").getText();
                 nbs[nnbs].woodFacBNH4=set.getChild("WoodFacBNH4").getText();
                 nbs[nnbs].woodFacBNO3=set.getChild("WoodFacBNO3").getText();
                 nbs[nnbs].barkFacC=set.getChild("BarkFacC").getText();
                 nbs[nnbs].barkFacN=set.getChild("BarkFacN").getText();
                 nbs[nnbs].barkFacS=set.getChild("BarkFacS").getText();
                 nbs[nnbs].barkFacP=set.getChild("BarkFacP").getText();
                 nbs[nnbs].barkFacK=set.getChild("BarkFacK").getText();
                 nbs[nnbs].barkFacCa=set.getChild("BarkFacCa").getText();
                 nbs[nnbs].barkFacMg=set.getChild("BarkFacMg").getText();
                 nbs[nnbs].barkFacMn=set.getChild("BarkFacMn").getText();
                 nbs[nnbs].barkFacFe=set.getChild("BarkFacFe").getText();
                 nbs[nnbs].barkFacBOup=set.getChild("BarkFacBOup").getText();
                 nbs[nnbs].barkFacBNH4=set.getChild("BarkFacBNH4").getText();
                 nbs[nnbs].barkFacBNO3=set.getChild("BarkFacBNO3").getText();
                 nbs[nnbs].branchFacC=set.getChild("BranchFacC").getText();
                 nbs[nnbs].branchFacN=set.getChild("BranchFacN").getText();
                 nbs[nnbs].branchFacS=set.getChild("BranchFacS").getText();
                 nbs[nnbs].branchFacP=set.getChild("BranchFacP").getText();
                 nbs[nnbs].branchFacK=set.getChild("BranchFacK").getText();
                 nbs[nnbs].branchFacCa=set.getChild("BranchFacCa").getText();
                 nbs[nnbs].branchFacMg=set.getChild("BranchFacMg").getText();
                 nbs[nnbs].branchFacMn=set.getChild("BranchFacMn").getText();
                 nbs[nnbs].branchFacFe=set.getChild("BranchFacFe").getText();
                 nbs[nnbs].branchFacBOup=set.getChild("BranchFacBOup").getText();
                 nbs[nnbs].branchFacBNH4=set.getChild("BranchFacBNH4").getText();
                 nbs[nnbs].branchFacBNO3=set.getChild("BranchFacBNO3").getText();
                 nbs[nnbs].reisigFacC=set.getChild("ReisigFacC").getText();
                 nbs[nnbs].reisigFacN=set.getChild("ReisigFacN").getText();
                 nbs[nnbs].reisigFacS=set.getChild("ReisigFacS").getText();
                 nbs[nnbs].reisigFacP=set.getChild("ReisigFacP").getText();
                 nbs[nnbs].reisigFacK=set.getChild("ReisigFacK").getText();
                 nbs[nnbs].reisigFacCa=set.getChild("ReisigFacCa").getText();
                 nbs[nnbs].reisigFacMg=set.getChild("ReisigFacMg").getText();
                 nbs[nnbs].reisigFacMn=set.getChild("ReisigFacMn").getText();
                 nbs[nnbs].reisigFacFe=set.getChild("ReisigFacFe").getText();
                 nbs[nnbs].reisigFacBOup=set.getChild("ReisigFacBOup").getText();
                 nbs[nnbs].reisigFacBNH4=set.getChild("ReisigFacBNH4").getText();
                 nbs[nnbs].reisigFacBNO3=set.getChild("ReisigFacBNO3").getText();  
                 nbs[nnbs].leafFacC=set.getChild("LeafFacC").getText();
                 nbs[nnbs].leafFacN=set.getChild("LeafFacN").getText();
                 nbs[nnbs].leafFacS=set.getChild("LeafFacS").getText();
                 nbs[nnbs].leafFacP=set.getChild("LeafFacP").getText();
                 nbs[nnbs].leafFacK=set.getChild("LeafFacK").getText();
                 nbs[nnbs].leafFacCa=set.getChild("LeafFacCa").getText();
                 nbs[nnbs].leafFacMg=set.getChild("LeafFacMg").getText();
                 nbs[nnbs].leafFacMn=set.getChild("LeafFacMn").getText();
                 nbs[nnbs].leafFacFe=set.getChild("LeafFacFe").getText();
                 nbs[nnbs].leafFacBOup=set.getChild("LeafFacBOup").getText();
                 nbs[nnbs].leafFacBNH4=set.getChild("LeafFacBNH4").getText();
                 nbs[nnbs].leafFacBNO3=set.getChild("LeafFacBNO3").getText();                 

                 nbs[nnbs].woodDensity=set.getChild("WoodDensity").getText();
                 nbs[nnbs].stemVolumeFunction=set.getChild("StemVolume").getText();
                 nbs[nnbs].taperFuctionClass=set.getChild("TaperClass").getText();
                 nbs[nnbs].taperFunctionNumber=Integer.parseInt(set.getChild("TaperFunctionNumber").getText());
                 nnbs = nnbs +1;
             }
            }

       } catch (Exception e) {log.info(e.toString());}

}

/**
 * Laden der Standardsortimente
 * @param url Url mit der XML-Datei zu den Standardsortimenten
 */
    public void loadls(URL url){
        nls=0;
        combo5Active=false;
        combo5Active=true;
        try {
         SAXBuilder builder = new SAXBuilder();
         URLConnection urlcon = url.openConnection();

         Document doc = builder.build(urlcon.getInputStream());
         
         DocType docType = doc.getDocType();
//        
         Element sortimente =  doc.getRootElement();  
         List Sortiment = sortimente.getChildren("Sortiment");
         Iterator i = Sortiment.iterator();
         
         while (i.hasNext()) {
            Element sortiment = (Element) i.next();
            ls[nls] = new LoggingSortiment(sortiment.getChild("Name").getText(),
                    Integer.parseInt(sortiment.getChild("Art_von").getText()),Integer.parseInt(sortiment.getChild("Art_bis").getText()),
                    Double.parseDouble(sortiment.getChild("minD").getText()),Double.parseDouble(sortiment.getChild("maxD").getText()),
                    Double.parseDouble(sortiment.getChild("minTop").getText()),Double.parseDouble(sortiment.getChild("maxTop").getText()),
                    Double.parseDouble(sortiment.getChild("minH").getText()),Double.parseDouble(sortiment.getChild("maxH").getText()),
                    Double.parseDouble(sortiment.getChild("ZugabeProzent").getText()),Double.parseDouble(sortiment.getChild("ZugabeCm").getText()),
                    Double.parseDouble(sortiment.getChild("Preis").getText()),Double.parseDouble(sortiment.getChild("Gewicht").getText()),
                    Double.parseDouble(sortiment.getChild("Wahrscheinlichkeit").getText()),
                    Boolean.parseBoolean(sortiment.getChild("nurZBaum").getText()),
                    Boolean.parseBoolean(sortiment.getChild("mehrfach").getText()),
                    Boolean.parseBoolean(sortiment.getChild("Entnahme").getText()),
                    Boolean.parseBoolean(sortiment.getChild("bisKA").getText()),
                    Boolean.parseBoolean(sortiment.getChild("ausgewaehlt").getText()),
                    nls,Integer.parseInt(sortiment.getChild("Zeitbedarfsfunktion").getText())
                    );
            listModel.addElement((String) ls[nls].name);
            nlist = nlist + 1;
            nls = nls +1;
         } 

       } catch (Exception e) {log.info(e.toString());}
       
}

/**
 * Laden der Zeitvorgaben
 * @param url Url der xml-Datei mit den Zeitfaktoren
 */    
    public void loadtef(URL url){
        try {
         SAXBuilder builder = new SAXBuilder();
         URLConnection urlcon = url.openConnection();

         Document doc = builder.build(urlcon.getInputStream());

         DocType docType = doc.getDocType();
//
         Element functions =  doc.getRootElement();
         List Function = functions.getChildren("ooo_row");
         Iterator i = Function.iterator();

         while (i.hasNext()) {
            Element function = (Element) i.next();
            tef[ntef] = new TimeEstimateFunction(Integer.parseInt(function.getChild("id").getText()),
                    function.getChild("Baumartengruppe").getText() ,
                    function.getChild("Sortiment").getText() ,
                    function.getChild("Taetigkeit").getText() ,
                    Integer.parseInt(function.getChild("Min_Mittendurchmesser").getText().trim()),
                    Integer.parseInt(function.getChild("Max_Mittendurchmesser").getText().trim()),
                    Double.parseDouble(function.getChild("a").getText().trim()),
                    Double.parseDouble(function.getChild("b").getText().trim()),
                    Double.parseDouble(function.getChild("c").getText().trim())
                    );
            ntef=ntef+1;
         }

       } catch (Exception e) {log.info(e.toString());}


}
//
    private void loadTableBM(Stand st){
       NumberFormat f=NumberFormat.getInstance();
       f=NumberFormat.getInstance(new Locale("en","US"));
       f.setMaximumFractionDigits(2);
       f.setMinimumFractionDigits(2);
       f.setGroupingUsed(false);

        for (int i=0;i<nnbl;i++){
            jTable3.setValueAt(nbl[i].year, i, 0);
            jTable3.setValueAt(f.format(nbl[i].sortimentsBM/1000), i, 1);
            jTable3.setValueAt(f.format(nbl[i].barksortimentsBM/1000), i, 2);
            //            jTable3.setValueAt(f.format(nbl[i].firewoodBM), i, 3);
            jTable3.setValueAt(f.format(nbl[i].firewoodBM/1000), i, 3);
            jTable3.setValueAt(f.format(nbl[i].barkfirewoodBM/1000), i, 4);
            jTable3.setValueAt(f.format(nbl[i].restwoodBM/1000), i, 5);
            jTable3.setValueAt(f.format(nbl[i].barkrestwoodBM/1000), i, 6);
            jTable3.setValueAt(f.format((nbl[i].branchBM + nbl[i].reisigBM +nbl[i].leafBM)/1000), i, 7);
            double sum = nbl[i].sortimentsBM/1000 + nbl[i].barksortimentsBM/1000 + nbl[i].firewoodBM/1000 +
                         nbl[i].barkfirewoodBM/1000 + nbl[i].restwoodBM/1000 + (nbl[i].branchBM + nbl[i].reisigBM +nbl[i].leafBM)/1000;
            jTable3.setValueAt(f.format(sum), i, 8);            

            }
    }

    private void loadTableNB(Stand st){
       NumberFormat f=NumberFormat.getInstance();
       f=NumberFormat.getInstance(new Locale("en","US"));
       f.setMaximumFractionDigits(2);
       f.setMinimumFractionDigits(2);
       f.setGroupingUsed(false);
       
       
       
       FunctionInterpreter fi = new FunctionInterpreter();
     
       double sumC = 0.0;
       double sumN = 0.0;
       double sumS = 0.0;
       double sumP = 0.0;
       double sumK = 0.0;
       double sumCa = 0.0;
       double sumMg = 0.0;
       double sumMn = 0.0;
       double sumFe = 0.0;
       double sumBOup =0.0;
       double sumBNH4 =0.0;
       double sumBNO3 =0.0;
       int mx = dataNb.getRowCount();
       for (int i=mx-1;i>=0; i-- ) dataNb.removeRow(i);
       for (int i=0;i<nnbl; i++ ){
             dataNb.addRow(rowDataNb);
             jTable4.setValueAt(f.format(nbl[i].year), i,0);            
             jTable4.setValueAt(f.format(nbl[i].sumC/1000), i,1);            
             jTable4.setValueAt(f.format(nbl[i].sumN/1000), i,2);            
             jTable4.setValueAt(f.format(nbl[i].sumS/1000), i,3);            
             jTable4.setValueAt(f.format(nbl[i].sumP/1000), i,4);            
             jTable4.setValueAt(f.format(nbl[i].sumK/1000), i,5);            
             jTable4.setValueAt(f.format(nbl[i].sumCa/1000), i,6);            
             jTable4.setValueAt(f.format(nbl[i].sumMg/1000), i,7);            
             jTable4.setValueAt(f.format(nbl[i].sumMn/1000), i,8);            
             jTable4.setValueAt(f.format(nbl[i].sumFe/1000), i,9);            
             jTable4.setValueAt(f.format(nbl[i].sumBOup/1000), i,10);            
             jTable4.setValueAt(f.format(nbl[i].sumBNH4/1000), i,11);            
             jTable4.setValueAt(f.format(nbl[i].sumBNO3/1000), i,12);            
         }
             dataNb.addRow(rowDataNb);
             jTable4.setValueAt("stehend", nnbl,0);            
             jTable4.setValueAt(f.format(nblSt.sumC/1000), nnbl,1);            
             jTable4.setValueAt(f.format(nblSt.sumN/1000), nnbl,2);            
             jTable4.setValueAt(f.format(nblSt.sumS/1000), nnbl,3);            
             jTable4.setValueAt(f.format(nblSt.sumP/1000), nnbl,4);            
             jTable4.setValueAt(f.format(nblSt.sumK/1000), nnbl,5);            
             jTable4.setValueAt(f.format(nblSt.sumCa/1000), nnbl,6);            
             jTable4.setValueAt(f.format(nblSt.sumMg/1000), nnbl,7);            
             jTable4.setValueAt(f.format(nblSt.sumMn/1000), nnbl,8);            
             jTable4.setValueAt(f.format(nblSt.sumFe/1000), nnbl,9);            
             jTable4.setValueAt(f.format(nblSt.sumBOup/1000), nnbl,10);            
             jTable4.setValueAt(f.format(nblSt.sumBNH4/1000), nnbl,11);            
             jTable4.setValueAt(f.format(nblSt.sumBNO3/1000), nnbl,12);            

       
 
       
    }

    private void loadTableDf(Stand st){
        int dfjahr = -99;
        int ndf =0;
        do {
           int minj = 9999;
           for (int i=0;i<st.ntrees;i++)
               if (st.tr[i].out < minj && st.tr[i].out > dfjahr && st.tr[i].out > -1 ) minj=st.tr[i].out;
           dfjahr = minj;
           Double vHardwood =0.0;
           Double vConifer =0.0;
           if (dfjahr >0 && dfjahr<9000){
              for (int i=0;i < st.ntrees;i++)
                  if (st.tr[i].out ==dfjahr && st.tr[i].outtype.treated()){
                      if (st.tr[i].code <500) vHardwood=vHardwood+st.tr[i].v*st.tr[i].fac;
                      else vConifer=vConifer+st.tr[i].v*st.tr[i].fac;
                  }
            vHardwood = vHardwood/st.size;
            vConifer  = vConifer/st.size;
            nbl[nnbl] = new BiomassLine();
            nbl[nnbl].year=dfjahr;
            nbl[nnbl].cutVolume=vHardwood +vConifer;
            jTable1.setValueAt(dfjahr, ndf, 0);
            jTable1.setValueAt(vHardwood.toString(),ndf, 1);
            jTable1.setValueAt(vConifer.toString(), ndf, 2);
            jTable1.setValueAt(true, ndf, 3);
            jTable1.setValueAt(false, ndf, 4);
            jTable1.setValueAt(nbl[nnbl].firewoodPerc, ndf, 5);
            jTable1.setValueAt(false, ndf, 6);
            jTable1.setValueAt(nbl[nnbl].restwoodPerc, ndf, 7);
            jTable1.setValueAt(nbl[nnbl].needlePerc, ndf, 8);
            nnbl=nnbl+1;
            ndf = ndf +1;
            }
        }
        while (dfjahr < st.year);
    }

    private void getTableDfSetting(){
        for (int i=0;i < nnbl;i++){
            nbl[i].sortiments = (Boolean) jTable1.getValueAt(i, 3);
            nbl[i].firewood = (Boolean) jTable1.getValueAt(i, 4);
            nbl[i].firewoodPerc = Double.parseDouble(jTable1.getValueAt(i, 5).toString());
            nbl[i].restwood = (Boolean) jTable1.getValueAt(i, 6);
            nbl[i].restwoodPerc = Double.parseDouble(jTable1.getValueAt(i, 7).toString());
            nbl[i].needlePerc = Double.parseDouble(jTable1.getValueAt(i, 8).toString());
        }

    }

    public void loadTableAssortment(Stand st){
// Assortments which do not belong to species
        for (int i=0; i < nls; i++){
            ls[i].ausgewaehlt=false;
        }

        for (int i=0; i < nls; i++){
            for (int j=0;j<st.nspecies;j++){
                if (st.sp[j].code >= ls[i].artvon && st.sp[j].code <= ls[i].artbis)
                    ls[i].ausgewaehlt = true; 
            } }

        for (int i=0;i< nls-1;i++)
           for (int j=i+1;j< nls;j++)
               if (ls[j].ausgewaehlt) {
                   LoggingSortiment temp=ls[i];
                   ls[i]=ls[j];
                   ls[j]=temp;
               }
// Feststellen der Anzahl ausgewaehlter ls
         int nausgewaehlt = 0;
         for (int i=0;i< nls;i++) if (ls[i].ausgewaehlt) nausgewaehlt = nausgewaehlt +1;
         nls = nausgewaehlt;
// Sortieren nach Wertigkeit
         for (int i=0;i< nls-1;i++)
           for (int j=i+1;j< nls;j++)
               if (ls[j].gewicht > ls[i].gewicht) {
                   LoggingSortiment temp=ls[i];
                   ls[i]=ls[j];
                   ls[j]=temp;
               }

        for (int i=0; i < nls; i++){
            ls[i].ausgewaehlt=true;
            jTable2.setValueAt(ls[i].ausgewaehlt,i,0);
            jTable2.setValueAt(ls[i].name, i, 1);
            jTable2.setValueAt(ls[i].artvon+"-"+ls[i].artbis,i,2);
            jTable2.setValueAt(ls[i].minTop, i, 3);
            jTable2.setValueAt(ls[i].minD, i, 4);
            jTable2.setValueAt(ls[i].maxH, i, 5);
        }
    }
    
       public void reloadTableAssortment(){
         for (int i=0; i < nls; i++){
            jTable2.setValueAt(ls[i].ausgewaehlt,i,0);
            jTable2.setValueAt(ls[i].name, i, 1);
            jTable2.setValueAt(ls[i].artvon+"-"+ls[i].artbis,i,2);
            jTable2.setValueAt(ls[i].minTop, i, 3);
            jTable2.setValueAt(ls[i].minD, i, 4);
            jTable2.setValueAt(ls[i].maxH, i, 5);
        }
       }

        private void getTableAssortments(){
        for (int i=0;i < nls ;i++){
            ls[i].ausgewaehlt = (Boolean) jTable2.getValueAt(i, 0);
        }

    }
    
       private void initJTable(){
           dataNb= new DefaultTableModel(
            new Object [][] {  },
            new String [] {
               "Jahr", "C", "N", "S", "P", "K",  "Ca", "Mg", "Mn", "Fe", "BoUP", "BNH4","BNO3"
            }
          );
         rowDataNb= new Object[]{" "," "," "," "," "," "," "," "," "," "," ", " ", " "};
         jTable4.setModel(dataNb);
         jTable4.setVisible(true);
    }



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JTextField jTextField13;
    // End of variables declaration//GEN-END:variables
    
}
