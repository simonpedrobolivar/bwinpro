/*
* @(#) DBAccessDialog.java
*  (c) 2002-2010 Juergen Nagel, Northwest German Research Station,
*      Grätzelstr.2, 37079 Göttingen, Germany
*      E-Mail: Juergen.Nagel@nw-fva.de
*
*  This program is free software; you can redistribute it and/or
*  modify it under the terms of the GNU General Public License
*  as published by the Free Software Foundation.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU General Public License for more details.
*/
package forestsimulator.DBAccess;
import java.awt.Frame;
import java.io.File;
import treegross.base.*;
import treegross.treatment.*;
import treegross.random.RandomNumber;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;


/** TreeGrOSS : DBAccessDialog.java
 *  version 	7.5 18-Mar-2010
 *  author	Juergen Nagel
 *
 * This dialog class is used only special data management of the NW-FVA and it is not documented.
 * It reads a forest stand from the data base structure of the NW-FVA
 */
public class DBAccessDialog extends javax.swing.JDialog {
    String aktivesDatenfile;
    Stand st;
    int growthCycles = 0;
    
    public DBAccessDialog(Frame parent, boolean modal,Stand stand, File dir) {
        super(parent, modal);
        initComponents();
        st = stand;
        jComboBox1.removeAllItems();
//        jTextField1.setText(dir+System.getProperty("file.separator")+"localdata.mdb");
        databaseFilenameTextField.setText(new File(dir, "localdata.mdb").getPath());
        jPanel1.setVisible(true);
        jPanel2.setVisible(false);
        calculateStandButton.setVisible(false);
        if (st.FileXMLSettings.indexOf("ElSalto")>0) jPanel2.setVisible(true);
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        searchButton = new javax.swing.JButton();
        databaseFilenameTextField = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox();
        loadStandButton = new javax.swing.JButton();
        calculateStandButton = new javax.swing.JButton();
        calculateAllButton = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        selectFileButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        simulationButton = new javax.swing.JButton();
        biDataLabel = new javax.swing.JLabel();
        feDataButton = new javax.swing.JButton();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        loadCircleButton = new javax.swing.JButton();
        yearsLabel = new javax.swing.JLabel();
        yearsTextField = new javax.swing.JTextField();
        biUpdateButton = new javax.swing.JButton();
        beginCheckBox = new javax.swing.JCheckBox();
        biPlotInfoButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        loadSPISButton = new javax.swing.JButton();
        plotNumberLabel = new javax.swing.JLabel();
        plotNumberTextField = new javax.swing.JTextField();
        specialMixtureButton = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("forestsimulator/gui"); // NOI18N
        searchButton.setText(bundle.getString("DBAccessDialog.searchButton.text")); // NOI18N
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        databaseFilenameTextField.setText(bundle.getString("DBAccessDialog.databaseFilenameTextField.text")); // NOI18N

        jTextField2.setText(bundle.getString("DBAccessDialog.jTextField2.text")); // NOI18N

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        loadStandButton.setText(bundle.getString("DBAccessDialog.loadStandButton.text")); // NOI18N
        loadStandButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadStandButtonActionPerformed(evt);
            }
        });

        calculateStandButton.setText(bundle.getString("DBAccessDialog.calculateStandButton.text")); // NOI18N
        calculateStandButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateStandButtonActionPerformed(evt);
            }
        });

        calculateAllButton.setText(bundle.getString("DBAccessDialog.calculateAllButton.text")); // NOI18N
        calculateAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateAllButtonActionPerformed(evt);
            }
        });

        jButton5.setText("null");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        selectFileButton.setText(bundle.getString("DBAccessDialog.selectFileButton.text")); // NOI18N
        selectFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectFileButtonActionPerformed(evt);
            }
        });

        simulationButton.setText(bundle.getString("DBAccessDialog.simulationButton.text")); // NOI18N
        simulationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simulationButtonActionPerformed(evt);
            }
        });

        biDataLabel.setText(bundle.getString("DBAccessDialog.biDataLabel.text")); // NOI18N

        feDataButton.setText(bundle.getString("DBAccessDialog.feDataButton.text")); // NOI18N
        feDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                feDataButtonActionPerformed(evt);
            }
        });

        jTextField3.setText(bundle.getString("DBAccessDialog.jTextField3.text")); // NOI18N

        jTextField4.setText(bundle.getString("DBAccessDialog.jTextField4.text")); // NOI18N

        jTextField6.setText(bundle.getString("DBAccessDialog.jTextField6.text")); // NOI18N

        loadCircleButton.setText(bundle.getString("DBAccessDialog.loadCircleButton.text")); // NOI18N
        loadCircleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadCircleButtonActionPerformed(evt);
            }
        });

        yearsLabel.setText(bundle.getString("DBAccessDialog.yearsLabel.text")); // NOI18N

        yearsTextField.setText(bundle.getString("DBAccessDialog.yearsTextField.text")); // NOI18N
        yearsTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yearsTextFieldActionPerformed(evt);
            }
        });

        biUpdateButton.setText(bundle.getString("DBAccessDialog.biUpdateButton.text")); // NOI18N
        biUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                biUpdateButtonActionPerformed(evt);
            }
        });

        beginCheckBox.setText(bundle.getString("DBAccessDialog.beginCheckBox.text")); // NOI18N

        biPlotInfoButton.setText(bundle.getString("DBAccessDialog.biPlotInfoButton.text")); // NOI18N
        biPlotInfoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                biPlotInfoButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(biDataLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(yearsLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(yearsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(simulationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(biUpdateButton, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(beginCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(biPlotInfoButton)
                    .addComponent(feDataButton)
                    .addComponent(loadCircleButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {biPlotInfoButton, feDataButton, loadCircleButton});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(loadCircleButton))
                    .addComponent(biDataLabel))
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(biUpdateButton)
                    .addComponent(beginCheckBox)
                    .addComponent(yearsLabel)
                    .addComponent(yearsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(biPlotInfoButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(feDataButton)
                    .addComponent(simulationButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        loadSPISButton.setText(bundle.getString("DBAccessDialog.loadSPISButton.text")); // NOI18N
        loadSPISButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadSPISButtonActionPerformed(evt);
            }
        });

        plotNumberLabel.setText(bundle.getString("DBAccessDialog.plotNumberLabel.text")); // NOI18N

        plotNumberTextField.setText(bundle.getString("DBAccessDialog.plotNumberTextField.text")); // NOI18N
        plotNumberTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plotNumberTextFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(86, 86, 86)
                .addComponent(plotNumberLabel)
                .addGap(18, 18, 18)
                .addComponent(plotNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(loadSPISButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loadSPISButton)
                    .addComponent(plotNumberLabel)
                    .addComponent(plotNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(51, Short.MAX_VALUE))
        );

        specialMixtureButton.setText(bundle.getString("DBAccessDialog.specialMixtureButton.text")); // NOI18N
        specialMixtureButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                specialMixtureButtonActionPerformed(evt);
            }
        });

        jButton14.setText(bundle.getString("DBAccessDialog.jButton14.text")); // NOI18N
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(loadStandButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGap(18, 18, 18)
                            .addComponent(calculateStandButton, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(calculateAllButton, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(239, 239, 239)
                            .addComponent(jButton5)
                            .addGap(197, 197, 197))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(databaseFilenameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 858, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(15, 15, 15)
                            .addComponent(selectFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(8, 8, 8)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 529, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(searchButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton14, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(specialMixtureButton, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(specialMixtureButton)
                    .addComponent(jButton14))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(databaseFilenameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectFileButton))
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchButton)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loadStandButton)
                    .addComponent(calculateStandButton)
                    .addComponent(calculateAllButton)
                    .addComponent(jButton5))
                .addGap(9, 9, 9)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(111, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        aktivesDatenfile = databaseFilenameTextField.getText();
        ConnectionFactory dbconnAC = new ConnectionFactory();
        try (Connection connection = dbconnAC.openDBConnection(dbconnAC.ACCESS, aktivesDatenfile, "", "", false, true);
                PreparedStatement stmt = connection.prepareStatement("SELECT * FROM Auf WHERE edvid = '?'")) {
            stmt.setString(1, jTextField2.getText());
            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    jComboBox1.addItem(rs.getInt("auf"));
                }
            }
        } catch (SQLException e) {
            Logger.getLogger(DBAccessDialog.class.getName()).log(Level.SEVERE, "Problem with database", e);
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void loadStandButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadStandButtonActionPerformed
        aktivesDatenfile = databaseFilenameTextField.getText();
        ConnectionFactory dbconnAC = new ConnectionFactory();     // a class to manage the conection to a database
        Connection con = dbconnAC.openDBConnection(dbconnAC.ACCESS, aktivesDatenfile, "", "", false, true);
        LoadTreegrossStand lts = new  LoadTreegrossStand(); 
        
        String ids = jTextField2.getText();
        Object txt = jComboBox1.getSelectedItem();
        
        int aufs = Integer.parseInt(txt.toString());
        
        st = lts.loadFromDB(con, st, ids, aufs , true, true);
        st.sortbyd();
        st.missingData();
        GenerateXY gxy =new GenerateXY();
        gxy.zufall(st);
        // Test if all trees are in area           
           for (int k=0; k < st.ntrees; k++){
               if (pnpoly(st.tr[k].x, st.tr[k].y, st)==0){
                   st.tr[k].out=1900;
                   st.tr[k].outtype=1;
               }
           }

            st.descspecies();
// Define all trees with fac = 0.0 as dead zu that there is no growth          
           for (int k=0; k < st.ntrees; k++){
               if (st.tr[k].fac==0.0){
                   st.tr[k].out=1900;
                   st.tr[k].outtype=1;
               }
           }
        st.descspecies();
        try{
          con.close();
        } catch (Exception e){  System.out.println("Problem: "+" "+e); }

        dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_loadStandButtonActionPerformed

    private void calculateStandButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculateStandButtonActionPerformed
        aktivesDatenfile = databaseFilenameTextField.getText();
        ConnectionFactory dbconnAC = new ConnectionFactory();     // a class to manage the conection to a database
        Connection con = dbconnAC.openDBConnection(dbconnAC.ACCESS, aktivesDatenfile, "", "", false, true);
        Treatment2 t2 = new Treatment2();
        LoadTreegrossStand lts = new  LoadTreegrossStand(); 
        
        
        String ids = jTextField2.getText();
        Object txt = jComboBox1.getSelectedItem();
        
        int aufs = Integer.parseInt(txt.toString());
        
        st=lts.loadFromDB( con, st, ids, aufs , true, true);
        st.sortbyd();
        st.missingData();
        GenerateXY gxy =new GenerateXY();
        gxy.zufall(st);
        st.descspecies();
        st=lts.loadRules( con, st, ids, aufs, t2, 0 );
        lts.saveBaum(con, st, ids, aufs, 0, 0);
        for (int i=0;i<st.temp_Integer;i++){
            st.grow(5, false);
            st.sortbyd();
            st.missingData();
            st.descspecies();
            lts.saveBaum(con, st, ids, aufs, i+1,0);
        }
        
        try{
          con.close();
        } catch (Exception e){  System.out.println("Problem: "+" "+e); }

        dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_calculateStandButtonActionPerformed

    private void calculateAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculateAllButtonActionPerformed
        aktivesDatenfile = databaseFilenameTextField.getText();
        ConnectionFactory dbconnAC = new ConnectionFactory();     // a class to manage the conection to a database
        Connection con = dbconnAC.openDBConnection(dbconnAC.ACCESS, aktivesDatenfile, "", "", false, true);
        LoadTreegrossStand lts = new LoadTreegrossStand();

        String ida[] = new String[50000];
        int aufa[] = new int[50000];
        int scen[] = new int[50000];
        int nauf = 0;
        try {
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT * FROM Vorschrift  ");
            while (rs.next()) {
                ida[nauf] = rs.getObject("edvid").toString();
                aufa[nauf] = rs.getInt("auf");
                scen[nauf] = rs.getInt("Szenario");
                nauf = nauf + 1;
            }
        } catch (Exception e) {
            System.out.println("Problem: " + " " + e);
        }

        for (int ii = 0; ii < nauf; ii++) {
            String ids = ida[ii];
            int aufs = aufa[ii];
            int nwiederh = 0;
//
            try (PreparedStatement stmt = con.prepareStatement("SELECT * FROM Vorschrift WHERE edvid = ? AND auf = ? AND Szenario = ?")) {
                stmt.setString(1, ids);
                stmt.setInt(2, aufs);
                stmt.setInt(3, scen[ii]);
                try (ResultSet rs = stmt.executeQuery()) {
                    while (rs.next()) {
                        nwiederh = rs.getInt("wiederholung");
                    }
                }
            } catch (Exception e) {
                System.out.println("Problem: " + " " + e);
            }
//
            for (int iw = 0; iw < nwiederh; iw++) {
                st = lts.loadFromDB(con, st, ids, aufs, true, true);
                st.sortbyd();
                st.missingData();
                GenerateXY gxy = new GenerateXY();
                gxy.zufall(st);
// Test if all trees are in area           
                for (int k = 0; k < st.ntrees; k++) {
                    if (pnpoly(st.tr[k].x, st.tr[k].y, st) == 0) {
                        st.tr[k].out = 1900;
                        st.tr[k].outtype = 1;
                    }
                }
                st.descspecies();
// Define all trees with fac = 0.0 as dead zu that there is no growth          
                for (int k = 0; k < st.ntrees; k++) {
                    if (st.tr[k].fac == 0.0) {
                        st.tr[k].out = 1900;
                        st.tr[k].outtype = 1;
                    }
                }
                st.descspecies();
                Treatment2 t2 = new Treatment2();
                st = lts.loadRules(con, st, ids, aufs, t2, scen[ii]);
                int ebaum = lts.getEBaum();
                int baumart = lts.getBaumart();
                int bestand = lts.getBestand();
                int durchf = lts.getDurchf();
                if (ebaum == 1) {
                    lts.saveBaum(con, st, ids, aufs, 0, iw + 1);
                }
                if (baumart == 1) {
                    lts.saveSpecies(con, st, ids, aufs, 0, iw + 1);
                }
                if (bestand == 1) {
                    lts.saveStand(con, st, ids, aufs, 0, iw + 1);
                }
                for (int i = 0; i < st.temp_Integer; i++) {
                    if (durchf == 1) {
                        st.descspecies();
                        st.sortbyd();
                        t2.executeManager2(st);
                        st.descspecies();
                    }
                    st.executeMortality();
                    st.descspecies();
                    if (bestand == 1) {
                        lts.saveStand(con, st, ids, aufs, i + 1, iw + 1);
                    }
                    if (ebaum == 1) {
                        lts.saveBaum(con, st, ids, aufs, i + 1, iw + 1);
                    }
                    if (baumart == 1) {
                        lts.saveSpecies(con, st, ids, aufs, i + 1, iw + 1);
                    }
                    st.grow(5, st.ingrowthActive);
                    st.sortbyd();
                    st.missingData();
                    st.descspecies();
                }
                if (ebaum == 2) {
                    lts.saveBaum(con, st, ids, aufs, st.temp_Integer, iw + 1);
                }
            }
        }

        try {
            con.close();
        } catch (Exception e) {
            System.out.println("Problem: " + " " + e);
        }
        dispose();
    }//GEN-LAST:event_calculateAllButtonActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        aktivesDatenfile = databaseFilenameTextField.getText();
        ConnectionFactory dbconnAC= new ConnectionFactory();     // a class to manage the conection to a database
        Connection con = dbconnAC.openDBConnection(dbconnAC.ACCESS, aktivesDatenfile, "", "", false, true);
        LoadTreegrossStand lts = new  LoadTreegrossStand(); 
        lts.saveXMLToDB(con, st);
        try{
          con.close();
        } catch (Exception e){  System.out.println("Problem: "+" "+e); }
        dispose();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void selectFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectFileButtonActionPerformed
        // Select data base file
        java.io.File f = new java.io.File("");
        String localPath="";
        try{
           localPath=  f.getCanonicalPath();
        }
        catch (Exception e){};
        javax.swing.JFileChooser jf = new javax.swing.JFileChooser();
        jf.setCurrentDirectory(new java.io.File(localPath));
        int k=jf.showOpenDialog(this);
        java.io.File verzeichnis = jf.getSelectedFile();
        databaseFilenameTextField.setText(verzeichnis.getAbsolutePath());        



        
    }//GEN-LAST:event_selectFileButtonActionPerformed

    private void loadSPISButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadSPISButtonActionPerformed
        // TODO add your handling code here:
        aktivesDatenfile = databaseFilenameTextField.getText();
        ConnectionFactory dbconnAC= new ConnectionFactory();     // a class to manage the conection to a database
        Connection con = dbconnAC.openDBConnection(dbconnAC.ACCESS, aktivesDatenfile, "", "", false, true);
        LoadProbekreis lpk = new LoadProbekreis();
        int pl = Integer.parseInt(plotNumberTextField.getText());
        st = lpk.loadFromElSalto(con, st,  pl );
        try{
          con.close();
        } catch (Exception e){  System.out.println("Problem: "+" "+e); }
        st.missingData();
        GenerateXY gxy = new GenerateXY();
        gxy.setGroupRadius(0.0);
        gxy.zufall(st);
        st.sortbyd();
        st.descspecies();
        
        st.random.setRandomType(RandomNumber.PSEUDO);

        dispose();

    }//GEN-LAST:event_loadSPISButtonActionPerformed

    private void specialMixtureButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_specialMixtureButtonActionPerformed
        // TODO add your handling code here:
        aktivesDatenfile = databaseFilenameTextField.getText();
        ConnectionFactory dbconnAC= new ConnectionFactory();     // a class to manage the conection to a database
        Connection con = dbconnAC.openDBConnection(dbconnAC.ACCESS, aktivesDatenfile, "", "", false, true);
        LoadTreegrossStand lts = new  LoadTreegrossStand(); 
        String ids = "95650200";
        
        int aufs = 8;
        
        try{
           Statement stmt = con.createStatement();
           ResultSet rs = stmt.executeQuery("SELECT * FROM AufRun   "); 
           while (rs.next()){
               ids = rs.getString("edvid");
               aufs= rs.getInt("auf");
           
                       
        
         
        st=lts.loadFromDB( con, st, ids, aufs , true, true);
        st.sortbyd();
           for (int k=0; k < st.ntrees; k++){
               if (st.tr[k].code==320){
                   st.tr[k].code=321;
               }
           }
        st.missingData();
        GenerateXY gxy =new GenerateXY();
        gxy.zufall(st);
        // Test if all trees are in area           
           for (int k=0; k < st.ntrees; k++){
               if (pnpoly(st.tr[k].x, st.tr[k].y, st)==0){
                   st.tr[k].out=1900;
                   st.tr[k].outtype=1;
               }
           }

            st.descspecies();
// Define all trees with fac = 0.0 as dead zu that there is no growth          
           for (int k=0; k < st.ntrees; k++){
               if (st.tr[k].fac==0.0){
                   st.tr[k].out=1900;
                   st.tr[k].outtype=1;
               }
           }
        st.descspecies();
        try{
//          con.close();
        } catch (Exception e){  System.out.println("Problem: "+" "+e); }

// Daten speichern        
        
        aktivesDatenfile = databaseFilenameTextField.getText();
        dbconnAC= new ConnectionFactory();     // a class to manage the conection to a database
        con = dbconnAC.openDBConnection(dbconnAC.ACCESS, aktivesDatenfile, "", "", false, true);
        MixedTreeInfo mti = new MixedTreeInfo();
        mti.saveTreeInfo(con, st,  ids, aufs );
        
        lts.saveSpecies(con, st, ids, aufs, 0, 0);

        
           }
        System.out.println("edvis auf fertig: "+ids+"  "+aufs);   
        con.close();
        }catch (Exception e){  System.out.println("Problem: "+" "+e); }
        
        dispose();
        
    }//GEN-LAST:event_specialMixtureButtonActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        aktivesDatenfile = databaseFilenameTextField.getText();
        ConnectionFactory dbconnAC = new ConnectionFactory();     // a class to manage the conection to a database
        LoadTreegrossStand lts = new LoadTreegrossStand();
        try (Connection con = dbconnAC.openDBConnection(dbconnAC.ACCESS, aktivesDatenfile, "", "", false, true)) {
            for (int ib = 0; ib < 16; ib++) {
                int bestand = ib;
                for (int j = 0; j < 9; j++) {
                    double mix = 0.0;
                    for (int i = 0; i < 21; i++) {
                        int art1 = 211;
                        int art2 = 511;
                        Double v211B = 0.0;
                        Double v511B = 0.0;
                        Double v211E = 0.0;
                        Double v511E = 0.0;
                        Double c66B = 0.0;
                        Double c66F = 0.0;
                        st = lts.newStand(st, "FiBu", 0.5);

                        double mix1 = mix + i * 0.05;
                        double mix2 = 1.0 - i * 0.05;
                        if (mix1 > 0) {
                            st = lts.addLayerFromStartwert(con, st, bestand, art1, mix1);
                        }
                        if (mix2 > 0) {
                            st = lts.addLayerFromStartwert(con, st, bestand, art2, mix2);
                        }
                        for (int ii = 0; ii < st.nspecies; ii++) {
                            if (st.sp[ii].code == 211) {
                                v211B = st.getVha(211);
                            }
                            if (st.sp[ii].code == 511) {
                                v511B = st.getVha(511);
                            }
                        }
                        lts.saveSpecies(con, st, "FiBu", i * 5, bestand, st.year);
                        st.grow(5, false);
                        st.descspecies();
                        lts.saveSpecies(con, st, "FiBu", i, bestand, st.year);
                        for (int ii = 0; ii < st.nspecies; ii++) {
                            if (st.sp[ii].code == 211) {
                                v211E = st.getVha(211);
                                int anz = 0;
                                for (int jj = 0; jj < st.ntrees; jj++) {
                                    if (st.tr[jj].code == 211 && st.tr[jj].out < 0) {
                                        c66B = c66B + st.tr[jj].c66xy;
                                        anz = anz + 1;
                                    }
                                }
                                if (anz > 0) {
                                    c66B = c66B / anz;
                                }
                            }
                            if (st.sp[ii].code == 511) {
                                v511E = st.getVha(511);
                                int anz = 0;
                                for (int jj = 0; jj < st.ntrees; jj++) {
                                    if (st.tr[jj].code == 511 && st.tr[jj].out < 0) {
                                        c66F = c66F + st.tr[jj].c66xy;
                                        anz = anz + 1;
                                    }
                                }
                                if (anz > 0) {
                                    c66F = c66F / anz;
                                }

                            }
                        }
                        try (PreparedStatement stmt = con.prepareStatement("INSERT INTO Produktivitaet ( Bestand, MixBu, V1Art1, V1Art2, V2Art1, V2Art2, c66xyArt1, c66xyArt2) values (?, ?, ?, ?, ?, ?, ?, ?)")) {
                            int bum = i * 5;
                            stmt.setInt(1, bestand);
                            stmt.setInt(2, bum);
                            stmt.setDouble(3, v211B);
                            stmt.setDouble(4, v511B);
                            stmt.setDouble(5, v211E);
                            stmt.setDouble(6, v511E);
                            stmt.setDouble(7, c66B);
                            stmt.setDouble(8, c66F);
                            stmt.execute();
                        } catch (SQLException e) {
                            System.out.println("Datenbank Stammv :" + e);
                        }
                        System.out.println("Fertig " + ib + "  " + j);
                    }
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(DBAccessDialog.class.getName()).log(Level.SEVERE, "Problem with database", ex);
        }
        dispose();
    }//GEN-LAST:event_jButton14ActionPerformed

    private void plotNumberTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plotNumberTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_plotNumberTextFieldActionPerformed

    private void biPlotInfoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_biPlotInfoButtonActionPerformed
        // BI Plot Info
        boolean beginnPeriode = beginCheckBox.isSelected();
        LoadTreegrossStand lts = new LoadTreegrossStand();
        aktivesDatenfile = databaseFilenameTextField.getText();
        ConnectionFactory dbconnAC = new ConnectionFactory();     // a class to manage the conection to a database

        String bi = "179-2001-001";
        String bi2 = " ";
        //        String bi2 = "";
        String pk = "4172";

        String orga[] = new String[300];
        int norga = 0;

        try (Connection con = dbconnAC.openDBConnection(dbconnAC.ACCESS, aktivesDatenfile, "", "", false, true)) {
            try (Statement stmt = con.createStatement(); ResultSet rs = stmt.executeQuery("SELECT * FROM tblDatOrga")) {
                while (rs.next()) {
                    int stj = rs.getInt("DatOrga_Stj");
                    if (stj >= 1990) {
                        orga[norga] = rs.getString("DatOrga_Key");
                        norga = norga + 1;
                    }
                }
            }
            for (int inventur = 0; inventur < norga; inventur++) {

                bi = orga[inventur];
                bi2 = "";
                int type = 2;
                /*        if (beginnPeriode == false){
                if (bi.indexOf("167") >= 0) bi2="167-2009-001";
                if (bi.indexOf("172") >= 0) bi2="172-2008-001";
                if (bi.indexOf("179") >= 0) bi2="179-2009-001";
                if (bi.indexOf("262") >= 0) bi2="262-2009-001";
                if (bi.indexOf("268") >= 0) bi2="268-2011-001";
                if (bi.indexOf("269") >= 0) bi2="269-2008-001";
                if (bi.indexOf("273") >= 0) bi2="273-2008-001";
                type=3;
            }
                 */

                int kr[] = new int[10000];
                int nkr = 0;
                try (PreparedStatement stmt = con.prepareStatement("SELECT * FROM tblDatPh2 WHERE DatOrga_Key = ?")) {
                    stmt.setString(1, bi);
                    try (ResultSet rs = stmt.executeQuery()) {
                        while (rs.next()) {
                            kr[nkr] = rs.getInt("DatPh2_KSPNr");
                            nkr = nkr + 1;
                        }
                    }
                } catch (Exception e) {
                    System.out.println("Problem: " + " " + e);
                }

                for (int kreis = 0; kreis < nkr; kreis++) {

                    LoadProbekreis lpk = new LoadProbekreis();

                    st = lpk.loadFromDB(con, st, bi, kr[kreis], bi2, type);
                    st.missingData();
                    for (int i = 0; i < st.ntrees; i++) {
                        if (st.tr[i].out > 0) {
                            st.tr[i].outtype = 2;
                        }
                    }
                    GenerateXY gxy = new GenerateXY();
                    gxy.setGroupRadius(0.0);
                    gxy.zufall(st);
                    st.sortbyd();
                    st.descspecies();
                    lts.saveStandV2(con, st, bi, kr[kreis], type, st.year, st.bt);
                    lts.saveSpecies(con, st, bi, kr[kreis], type, st.year);

                    System.out.println(kreis + "  FERTIG PLOT: " + bi + " " + kr[kreis]);

                } // Kreise
            } // Inventur
        } catch (SQLException e) {
            Logger.getLogger(DBAccessDialog.class.getName()).log(Level.SEVERE, "Problem with database.", e);
        }
        dispose();
    }//GEN-LAST:event_biPlotInfoButtonActionPerformed

    private void biUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_biUpdateButtonActionPerformed
        LoadTreegrossStand lts = new LoadTreegrossStand();
        aktivesDatenfile = databaseFilenameTextField.getText();
        ConnectionFactory dbconnAC = new ConnectionFactory();
        try (Connection con = dbconnAC.openDBConnection(dbconnAC.ACCESS, aktivesDatenfile, "", "", false, true)) {
            String bi = "179-2001-001";
            String pk = "4172";

            String orga[] = new String[900];
            int norga = 0;

            try (Statement stmt = con.createStatement();
                    ResultSet rs = stmt.executeQuery("SELECT * FROM tblDatOrga  ")) {
                while (rs.next()) {
                    int stj = rs.getInt("DatOrga_Stj");
                    /**
                     * Änderung 2008 nach 2018
                     */
                    if (stj < 2018) {
                        orga[norga] = rs.getString("DatOrga_Key");
                        norga = norga + 1;
                    }
                }
            } catch (SQLException e) {
                System.out.println("Problem: " + " " + e);
            }

            for (int inventur = 0; inventur < norga; inventur++) {

                bi = orga[inventur];
                int kr[] = new int[90000];
                int nkr = 0;
                try (PreparedStatement stmt = con.prepareStatement("SELECT * FROM tblDatPh2 WHERE DatOrga_Key = ?")) {
                    stmt.setString(1, bi);
                    try (ResultSet rs = stmt.executeQuery()) {
                        while (rs.next()) {
                            kr[nkr] = rs.getInt("DatPh2_KSPNr");
                            nkr = nkr + 1;
                        }
                    }
                } catch (Exception e) {
                    System.out.println("Problem: " + " " + e);
                }

                for (int kreis = 0; kreis < nkr; kreis++) {

                    LoadProbekreis lpk = new LoadProbekreis();

                    st = lpk.loadFromDB(con, st, bi, kr[kreis], "", 1);
                    st.missingData();
                    GenerateXY gxy = new GenerateXY();
                    gxy.setGroupRadius(0.0);
                    gxy.zufall(st);
                    st.sortbyd();
                    st.descspecies();

                    /*        st.randomGrowthEffects=false;
                    st.ingrowthActive = false;
                    st.riskActive = true;
                    st.distanceDependent=true;
                    Treatment2 treatment2 = new Treatment2();

                    if (st.bt > 0 )
                    treatment2.setBT(st);

                    treatment2.setAutoPlanting(st, false, false, 0.2, "511");
                    treatment2.setSkidTrails(st, false, 20.0, 4.0);
                    treatment2.setNatureProtection(st, 0,0,false,0.1,200);
                    treatment2.setHarvestRegime(st, 0, 0, 80, 0.1, "0.3;");
                    treatment2.setThinningRegime(st, 0,1.0,10,60,false);
                     */
                    //        lts.saveStandV2(dbconnAC, st, bi , kr[kreis], 1, st.year, st.bt);
                    //        lts.saveSpecies(dbconnAC, st, bi , kr[kreis], 1, st.year);
                    /*
                    for (int ngr =0; ngr <2; ngr++){
                        treatment2.executeManager2(st);
                        st.descspecies();
                        st.executeMortality();
                        st.descspecies();
                        st.grow(5, false);
                        st.descspecies();
                    }
                     */
                    lts.saveStandV2(con, st, bi, kr[kreis], 1, st.year, st.bt);
                    //        lts.saveBaum(con, st, bi , kr[kreis], 1, st.year);
                    lts.saveSpeciesV2(con, st, bi, kr[kreis], 1, st.year);
                    System.out.println(inventur + " " + bi + " " + kreis + "  FERTIG PLOT: " + kr[kreis]);

                } // Kreise

            } // inventur
        } catch (Exception e) {
            System.out.println("Problem: " + " " + e);
        }
        dispose();
    }//GEN-LAST:event_biUpdateButtonActionPerformed

    private void yearsTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yearsTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_yearsTextFieldActionPerformed

    private void loadCircleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadCircleButtonActionPerformed
        // BI Probekreis laden
        aktivesDatenfile = databaseFilenameTextField.getText();
        ConnectionFactory dbconnAC = new ConnectionFactory();     // a class to manage the conection to a database
        try (Connection con = dbconnAC.openDBConnection(dbconnAC.ACCESS,  aktivesDatenfile, "", "", false, true)) {
            LoadProbekreis lpk = new LoadProbekreis();
            int pl = Integer.parseInt(jTextField4.getText());
            st = lpk.loadFromDB(con, st, jTextField3.getText(), pl, jTextField6.getText(),1);
        } catch (Exception e){  System.out.println("Problem: "+" "+e); }
        st.missingData();
        GenerateXY gxy = new GenerateXY();
        gxy.setGroupRadius(0.0);
        gxy.zufall(st);
        st.sortbyd();
        st.descspecies();

        st.random.setRandomType(RandomNumber.PSEUDO);

        Treatment2 treatment2 = new Treatment2();
        treatment2.setAutoPlanting(st, false, false, 0.2, "511");
        treatment2.setSkidTrails(st, false, 20.0, 4.0);
        treatment2.setNatureProtection(st, 0,0,false,0.1,200);
        treatment2.setHarvestRegime(st, 0, 0, 80, 0.1, "0.3;");
        treatment2.setThinningRegime(st, 2,1.0,10,60,false);

        dispose();
    }//GEN-LAST:event_loadCircleButtonActionPerformed

    private void feDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_feDataButtonActionPerformed
        // TFE Daten
        aktivesDatenfile = databaseFilenameTextField.getText();
        ConnectionFactory dbconnAC = new ConnectionFactory();     // a class to manage the conection to a database
        double hg = 0.0;
        double dg = 0.0;
        double dmax = 0.0;
        double g = 0.0;
        double h100 = 0.0;
        String id = "test";
        int art = 0;
        int alt = 0;
        Integer nummer = 0;
        try (Connection con = dbconnAC.openDBConnection(dbconnAC.ACCESS, aktivesDatenfile, "", "", false, true)) {
            try (Statement stmt = con.createStatement(); ResultSet rsx = stmt.executeQuery("select * from BucheRein2 ")) {
                while (rsx.next()) {
                    nummer = Integer.parseInt(rsx.getObject("ID").toString());
                    art = (int) Double.parseDouble(rsx.getObject("art").toString());
                    alt = (int) Double.parseDouble(rsx.getObject("alt").toString());
                    hg = Double.parseDouble(rsx.getObject("hg").toString());
                    h100 = Double.parseDouble(rsx.getObject("absHAlter100").toString());
                    dg = Double.parseDouble(rsx.getObject("dg").toString());
                    dmax = Double.parseDouble(rsx.getObject("d100").toString());
                    g = Double.parseDouble(rsx.getObject("gha").toString());
                    if (hg > 5.0 && dg > 7.0 && g > 0.0) {
                        EtafelSim etsim = new EtafelSim();
                        id = nummer.toString();
                        st = etsim.newYTStand(st, id, 0.5);

                        GenDistribution gdb = new GenDistribution();
                        gdb.weibull(st, art, alt, dg, hg, dmax, g * st.size, false);
                        // missing data fuer die Verteilung generieren
                        for (int j = 0; j < st.ntrees; j++) {
                            if (st.tr[j].si <= -9) {
                                st.tr[j].si = h100;
                            }
                        }
                        SIofDistrib siod = new SIofDistrib();
                        FunctionInterpreter fi = new FunctionInterpreter();
                        siod.si(st, art, alt, dg, hg);
                        for (int j = 0; j < st.ntrees; j++) {
                            if (st.tr[j].h == 0.0) {
                                Tree tree = new Tree();
                                tree.code = art;
                                tree.sp = st.tr[j].sp;
                                tree.sp.dg = dg;
                                tree.sp.hg = hg;
                                tree.sp.h100 = 0.0;
                                tree.sp.d100 = 0.0;
                                tree.d = st.tr[j].d;
                                tree.code = st.tr[j].code;
                                tree.sp = st.tr[j].sp;
                                tree.st = st;
                                //                                st.tr[j].h = fi.getValueForTree(tree, tree.sp.spDef.uniformHeightCurveXML) + fi.getValueForTree(tree, tree.sp.spDef.heightVariationXML) * nd.value(3.0);
                                st.tr[j].h = fi.getValueForTree(tree, tree.sp.spDef.uniformHeightCurveXML);
                            }
                        }
                        for (int j = 0; j < st.ntrees; j++) {
                            st.tr[j].setMissingData();
                        }
                        GenerateXY gxy = null;
                        gxy = new GenerateXY();
                        gxy.setGroupRadius(0.0);
                        gxy.zufall(st);
                        st.sortbyd();
                        st.descspecies();
                    }
                    st.random.setRandomType(RandomNumber.PSEUDO);
                    st.descspecies();
                    if (st.ntrees > 0) {
                        LoadTreegrossStand lts = new LoadTreegrossStand();
                        lts.saveStand(con, st, id, alt, 0, 0);
                        lts.saveSpecies(con, st, id, alt, 0, 0);
                        //
                        st.grow(5, false);
                        st.sortbyd();
                        st.missingData();
                        st.descspecies();
                        lts.saveStand(con, st, id, alt, 1, 0);
                        lts.saveSpecies(con, st, id, alt, 1, 0);
                    }

                }
            }
        } catch (Exception e) {
            Logger.getLogger(DBAccessDialog.class.getName()).log(Level.SEVERE, "Problem with database", e);
        }
        dispose();
    }//GEN-LAST:event_feDataButtonActionPerformed

    private void simulationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simulationButtonActionPerformed
        // Yield table simulation
        aktivesDatenfile = "C:\\Dokumente und Einstellungen\\nagel\\Eigene Dateien\\jnProgramme\\ForestSimulator\\data_standsimulation\\localdata.mdb";
        ConnectionFactory dbconnAC = new ConnectionFactory();     // a class to manage the conection to a database
        try (Connection con = dbconnAC.openDBConnection(dbconnAC.ACCESS, aktivesDatenfile, "", "", false, true)) {
            EtafelSim etsim = new EtafelSim();
            for (int iw = 1; iw < 3; iw++) {
                for (int i = 0; i < 5; i++) {
                    Integer ekl = 37 - (i * 4);
                    Integer ixno = iw;
                    String id = ixno.toString();
                    for (int j = 0; j < 1; j++) {
                        int age = 20;
                        Double mixPerc = 1.0;
                        st = etsim.newYTStand(st, id, 0.5);
                        st.ingrowthActive = false;
                        st.riskActive = false;
                        st.distanceDependent = true;
                        //st.randomGrowthEffects=true;
                        st.random.setRandomType(RandomNumber.PSEUDO);
                        st = etsim.addLayerFromTable(con, st, 711, ekl, age, 1.0);
                        st.descspecies();
                        //             st.sp[0].spDef.moderateThinning="12.0;0;1.0;120.0;1.0;130;130;1.0;140";
                        st.sp[0].trule.minCropTreeHeight = 12.0;
                        st.sp[0].trule.targetDiameter = 85.0;
                        st.sp[0].trule.targetCrownPercent = 100.0;
                        st.sp[0].trule.numberCropTreesWanted = 120;
                        st.sp[0].spDef.targetDiameter = 100.0;
                        st.sp[0].spDef.cropTreeNumber = 110;
                        Treatment2 treatment2 = new Treatment2();
                        treatment2.setAutoPlanting(st, false, false, 0.1, "511");
                        treatment2.setSkidTrails(st, true, 20.0, 4.0);
                        treatment2.setNatureProtection(st, 0, 0, false, 0.1, 200);
                        treatment2.setHarvestRegime(st, 2, 0, 180, 0.0, "0.3;");
                        treatment2.setThinningRegime(st, 0, 1.0, 0, 120, false);
                        if (st.ntrees > 0) {
                            age = (int) st.tr[0].age;
                            LoadTreegrossStand lts = new LoadTreegrossStand();
                            lts.saveStand(con, st, id, age, 0, ekl);
                            lts.saveSpecies(con, st, id, age, 0, ekl);
                            st.sortbyd();
                            st.missingData();
                            st.descspecies();

                            //
                            for (int jj = 0; jj < 20; jj++) {
                                treatment2.executeManager2(st);
                                st.executeMortality();
                                st.descspecies();
                                age = (int) st.tr[0].age;

                                lts.saveStand(con, st, id, age, 1, ekl);
                                lts.saveSpecies(con, st, id, age, 1, ekl);
                                st.grow(5, false);
                                st.descspecies();
                                System.out.println(jj + "  " + age);

                            }
                        }
                    }
                }
            }
        } catch (SQLException e) {
            Logger.getLogger(DBAccessDialog.class.getName()).log(Level.SEVERE, "Problem with database", e);
        }
        dispose();
    }//GEN-LAST:event_simulationButtonActionPerformed
 
    /** check if a point is in polygon , if return is 0 then outside*/
    private int pnpoly(double x, double y, Stand st){
        int i,j,c,m ;
        i=0;j=0;c=0;
        m=st.ncpnt;
        //      System.out.println("pnpoly "+m+" "+x+" y "+y);
        j=m-1;
        for (i=0;i< m;i++){
            if ((((st.cpnt[i].y<=y)&&(y<st.cpnt[j].y)) ||
            ((st.cpnt[j].y<=y)&&(y<st.cpnt[i].y))) &&
            (x<(st.cpnt[j].x-st.cpnt[i].x)*(y-st.cpnt[i].y)/
            (st.cpnt[j].y-st.cpnt[i].y)+st.cpnt[i].x)) {
                if (c==0) {c=1;} 
                else {c=0;}
            }

            j=i;
        }
        return c;
    }  

    
    /**
     * @param args the command line arguments
     */
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox beginCheckBox;
    private javax.swing.JLabel biDataLabel;
    private javax.swing.JButton biPlotInfoButton;
    private javax.swing.JButton biUpdateButton;
    private javax.swing.JButton calculateAllButton;
    private javax.swing.JButton calculateStandButton;
    private javax.swing.JTextField databaseFilenameTextField;
    private javax.swing.JButton feDataButton;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton5;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JButton loadCircleButton;
    private javax.swing.JButton loadSPISButton;
    private javax.swing.JButton loadStandButton;
    private javax.swing.JLabel plotNumberLabel;
    private javax.swing.JTextField plotNumberTextField;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton selectFileButton;
    private javax.swing.JButton simulationButton;
    private javax.swing.JButton specialMixtureButton;
    private javax.swing.JLabel yearsLabel;
    private javax.swing.JTextField yearsTextField;
    // End of variables declaration//GEN-END:variables
    
}
