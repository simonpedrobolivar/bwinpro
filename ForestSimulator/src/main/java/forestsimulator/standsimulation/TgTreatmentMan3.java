/* http://www.nw-fva.de
   Version 07-11-2008

   (c) 2002 Juergen Nagel, Northwest German Forest Research Station, 
       Grätzelstr.2, 37079 Göttingen, Germany
       E-Mail: Juergen.Nagel@nw-fva.de
 
This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT  WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
 */
package forestsimulator.standsimulation;

import forestsimulator.dbaccess.ConnectionFactory;
import forestsimulator.dbaccess.DatabaseEnvironmentalDataProvider;
import static forestsimulator.standsimulation.TreatmentTableColumn.Code;
import static forestsimulator.standsimulation.TreatmentTableColumn.CropTrees;
import static forestsimulator.standsimulation.TreatmentTableColumn.Mixture;
import static forestsimulator.standsimulation.TreatmentTableColumn.TargetD;
import static forestsimulator.standsimulation.TreatmentTableColumn.ThinningHeight;
import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.Year;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import treegross.base.*;
import treegross.base.rule.SkidTrailRules;
import treegross.base.rule.ThinningRegime;
import treegross.base.thinning.ThinningModeName;
import treegross.dynamic.siteindex.EnvironmentVariables;
import treegross.random.RandomNumber;

/**
 *
 * @author nagel
 */
public class TgTreatmentMan3 extends JPanel {

    private static final Logger logger = Logger.getLogger(TgTreatmentMan3.class.getName());
    private final DefaultTableModel speciesData;
    private final ResourceBundle messages = ResourceBundle.getBundle("forestsimulator/gui");
    private final Stand st;
    private final TgUser userSettings;
    private final TgYieldTable yt;
    private final ConnectionFactory connectionFactory;

    public TgTreatmentMan3(Stand stparent, TgJFrame frameparent, TgUser userSettings) {
        connectionFactory = new ConnectionFactory();
        this.userSettings = userSettings;
        st = stparent;
        yt = frameparent.yt;
        initComponents();

        speciesData = new DefaultTableModel(TreatmentTableColumn.values(), 0);
        speciesTable.setModel(speciesData);
        TreatmentTableColumn.applyCellEditors(speciesTable.getColumnModel());

        loadTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        simulationDurationLabel = new javax.swing.JLabel();
        simulationDurationTextField = new javax.swing.JTextField();
        simulationDurationUnitLabel = new javax.swing.JLabel();
        useRandomEffectsCheckBox = new javax.swing.JCheckBox();
        useIngrowthModelCheckBox = new javax.swing.JCheckBox();
        useMortalityCheckBox = new javax.swing.JCheckBox();
        useRiskModelCheckBox = new javax.swing.JCheckBox();
        useClimateDataCheckBox = new javax.swing.JCheckBox();
        climateScenarioComboBox = new javax.swing.JComboBox<>();
        startSimulationButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        treatmentRulesPanel = new javax.swing.JPanel();
        HeadingPanel = new javax.swing.JPanel();
        scenarioSettingsHeadingLabel = new javax.swing.JLabel();
        skidtrailsPanel = new javax.swing.JPanel();
        developmentCheckBox = new javax.swing.JCheckBox();
        skidtrailDistanceLabel = new javax.swing.JLabel();
        skidtrailDistanceTextField = new javax.swing.JTextField();
        skidtrailWidthLabel = new javax.swing.JLabel();
        skidtrailWidthTextField = new javax.swing.JTextField();
        thinningPanel = new javax.swing.JPanel();
        releaseOnlyCropTreesCheckBox = new javax.swing.JCheckBox();
        thinningAmountMinimumLabel = new javax.swing.JLabel();
        thinningAmountMinimumTextField = new javax.swing.JTextField();
        thinningAmountMaximumLabel = new javax.swing.JLabel();
        thinningAmountMaximumTextField = new javax.swing.JTextField();
        harvestingPanel = new javax.swing.JPanel();
        harvestingTypeLabel = new javax.swing.JLabel();
        harvestingTypeComboBox = new javax.swing.JComboBox();
        clearingLabel = new javax.swing.JLabel();
        clearingTextField = new javax.swing.JTextField();
        harvestingAmountMinimumLabel = new javax.swing.JLabel();
        harvestingAmountMinimumTextField = new javax.swing.JTextField();
        harvestingAmountMaximumLabel = new javax.swing.JLabel();
        harvestingAmountMaximumTextField = new javax.swing.JTextField();
        protectionPanel = new javax.swing.JPanel();
        habitatTreesLabel = new javax.swing.JLabel();
        habitatTreesTextField = new javax.swing.JTextField();
        woodTypeComboBox = new javax.swing.JComboBox();
        minorityProtectionCheckBox = new javax.swing.JCheckBox();
        minimumCoverLabel = new javax.swing.JLabel();
        minimumCoverTextField = new javax.swing.JTextField();
        protectionThicknessLabel = new javax.swing.JLabel();
        protectionThicknessTextField = new javax.swing.JTextField();
        plantingPanel = new javax.swing.JPanel();
        plantingCheckbox = new javax.swing.JCheckBox();
        unterstoryRemovalCheckBox = new javax.swing.JCheckBox();
        plantAtLabel = new javax.swing.JLabel();
        plantAtTextField = new javax.swing.JTextField();
        speciesCodeLabel = new javax.swing.JLabel();
        speciesCodeTextField = new javax.swing.JTextField();
        speciesSettingsPanel = new javax.swing.JPanel();
        speciesSettingsLabel = new javax.swing.JLabel();
        speciesScrollPane = new javax.swing.JScrollPane();
        speciesTable = new javax.swing.JTable();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        simulationDurationLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("forestsimulator/gui"); // NOI18N
        simulationDurationLabel.setText(bundle.getString("TgTreatmentMan3.simulationDurationLabel.text")); // NOI18N
        jPanel1.add(simulationDurationLabel);

        simulationDurationTextField.setText("5"); // NOI18N
        simulationDurationTextField.setPreferredSize(new java.awt.Dimension(22, 20));
        jPanel1.add(simulationDurationTextField);

        simulationDurationUnitLabel.setText(bundle.getString("TgTreatmentMan3.simulationDurationUnitLabel.text")); // NOI18N
        jPanel1.add(simulationDurationUnitLabel);

        useRandomEffectsCheckBox.setSelected(true);
        useRandomEffectsCheckBox.setText(bundle.getString("TgTreatmentMan3.useRandomEffectsCheckBox.text")); // NOI18N
        useRandomEffectsCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        useRandomEffectsCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jPanel1.add(useRandomEffectsCheckBox);

        useIngrowthModelCheckBox.setSelected(true);
        useIngrowthModelCheckBox.setText(bundle.getString("TgTreatmentMan3.useIngrowthModelCheckBox.text")); // NOI18N
        useIngrowthModelCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        useIngrowthModelCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jPanel1.add(useIngrowthModelCheckBox);

        useMortalityCheckBox.setSelected(true);
        useMortalityCheckBox.setText(bundle.getString("TgTreatmentMan3.useMortalityCheckBox.text")); // NOI18N
        useMortalityCheckBox.setPreferredSize(new java.awt.Dimension(67, 15));
        jPanel1.add(useMortalityCheckBox);

        useRiskModelCheckBox.setSelected(true);
        useRiskModelCheckBox.setText(bundle.getString("TgTreatmentMan3.useRiskModelCheckBox.text")); // NOI18N
        useRiskModelCheckBox.setPreferredSize(new java.awt.Dimension(75, 15));
        jPanel1.add(useRiskModelCheckBox);

        useClimateDataCheckBox.setSelected(true);
        useClimateDataCheckBox.setText(bundle.getString("TgTreatmentMan3.useClimateDataCheckBox.text")); // NOI18N
        jPanel1.add(useClimateDataCheckBox);

        climateScenarioComboBox.setModel(loadClimateScenarios());
        jPanel1.add(climateScenarioComboBox);

        startSimulationButton.setText(bundle.getString("TgTreatmentMan3.startSimulationButton.text")); // NOI18N
        startSimulationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startSimulationButtonActionPerformed(evt);
            }
        });
        jPanel1.add(startSimulationButton);

        add(jPanel1, java.awt.BorderLayout.NORTH);

        jPanel2.setLayout(new java.awt.BorderLayout());

        treatmentRulesPanel.setLayout(new javax.swing.BoxLayout(treatmentRulesPanel, javax.swing.BoxLayout.PAGE_AXIS));

        HeadingPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        scenarioSettingsHeadingLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        scenarioSettingsHeadingLabel.setText(bundle.getString("TgTreatmentMan3.scenarioSettingsHeadingLabel.text")); // NOI18N
        HeadingPanel.add(scenarioSettingsHeadingLabel);

        treatmentRulesPanel.add(HeadingPanel);

        skidtrailsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1), bundle.getString("TgTreatmentMan3.skidtrailPanel.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N
        skidtrailsPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        developmentCheckBox.setText(bundle.getString("TgTreatmentMan3.developmentCheckBox.text")); // NOI18N
        skidtrailsPanel.add(developmentCheckBox);

        skidtrailDistanceLabel.setText(bundle.getString("TgTreatmentMan3.skidtrailDistanceLabel.text")); // NOI18N
        skidtrailsPanel.add(skidtrailDistanceLabel);

        skidtrailDistanceTextField.setText("20.0"); // NOI18N
        skidtrailDistanceTextField.setPreferredSize(new java.awt.Dimension(35, 20));
        skidtrailsPanel.add(skidtrailDistanceTextField);

        skidtrailWidthLabel.setText(bundle.getString("TgTreatmentMan3.skidtrailWidthLabel.text")); // NOI18N
        skidtrailsPanel.add(skidtrailWidthLabel);

        skidtrailWidthTextField.setText("4.0"); // NOI18N
        skidtrailWidthTextField.setPreferredSize(new java.awt.Dimension(30, 20));
        skidtrailsPanel.add(skidtrailWidthTextField);

        treatmentRulesPanel.add(skidtrailsPanel);

        thinningPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1), bundle.getString("TgTreatmentMan3.thinningPanel.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N
        thinningPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        releaseOnlyCropTreesCheckBox.setText(bundle.getString("TgTreatmentMan3.releaseOnlyCropTreesCheckBox.text")); // NOI18N
        thinningPanel.add(releaseOnlyCropTreesCheckBox);

        thinningAmountMinimumLabel.setText(bundle.getString("TgTreatmentMan3.thinningAmountMinimumLabel.text")); // NOI18N
        thinningPanel.add(thinningAmountMinimumLabel);

        thinningAmountMinimumTextField.setText("0"); // NOI18N
        thinningAmountMinimumTextField.setPreferredSize(new java.awt.Dimension(35, 20));
        thinningPanel.add(thinningAmountMinimumTextField);

        thinningAmountMaximumLabel.setText(bundle.getString("TgTreatmentMan3.thinningAmountMaximumLabel.text")); // NOI18N
        thinningPanel.add(thinningAmountMaximumLabel);

        thinningAmountMaximumTextField.setText("60"); // NOI18N
        thinningAmountMaximumTextField.setPreferredSize(new java.awt.Dimension(35, 20));
        thinningPanel.add(thinningAmountMaximumTextField);

        treatmentRulesPanel.add(thinningPanel);

        harvestingPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1), bundle.getString("TgTreatmentMan3.harvestingPanel.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N
        harvestingPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        harvestingTypeLabel.setText(bundle.getString("TgTreatmentMan3.harvestingTypeLabel.text")); // NOI18N
        harvestingTypeLabel.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 5, 0, 0));
        harvestingPanel.add(harvestingTypeLabel);

        harvestingTypeComboBox.setModel(new DefaultComboBoxModel(HarvestingType.values()));
        harvestingTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                harvestingTypeComboBoxActionPerformed(evt);
            }
        });
        harvestingPanel.add(harvestingTypeComboBox);

        clearingLabel.setText(bundle.getString("TgTreatmentMan3.clearingLabel.text")); // NOI18N
        harvestingPanel.add(clearingLabel);

        clearingTextField.setText("0.3"); // NOI18N
        clearingTextField.setPreferredSize(new java.awt.Dimension(135, 20));
        harvestingPanel.add(clearingTextField);

        harvestingAmountMinimumLabel.setText(bundle.getString("TgTreatmentMan3.harvestingAmountMinimumLabel.text")); // NOI18N
        harvestingPanel.add(harvestingAmountMinimumLabel);

        harvestingAmountMinimumTextField.setText("10"); // NOI18N
        harvestingAmountMinimumTextField.setPreferredSize(new java.awt.Dimension(35, 20));
        harvestingPanel.add(harvestingAmountMinimumTextField);

        harvestingAmountMaximumLabel.setText(bundle.getString("TgTreatmentMan3.harvestingAmountMaximumLabel.text")); // NOI18N
        harvestingPanel.add(harvestingAmountMaximumLabel);

        harvestingAmountMaximumTextField.setText("120"); // NOI18N
        harvestingAmountMaximumTextField.setPreferredSize(new java.awt.Dimension(35, 20));
        harvestingPanel.add(harvestingAmountMaximumTextField);

        treatmentRulesPanel.add(harvestingPanel);

        protectionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1), bundle.getString("TgTreatmentMan3.natureProtectionPanel.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N
        protectionPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        habitatTreesLabel.setText(bundle.getString("TgTreatmentMan3.habitatTreesLabel.text")); // NOI18N
        habitatTreesLabel.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 5, 0, 0));
        protectionPanel.add(habitatTreesLabel);

        habitatTreesTextField.setText("0"); // NOI18N
        habitatTreesTextField.setPreferredSize(new java.awt.Dimension(35, 20));
        protectionPanel.add(habitatTreesTextField);

        woodTypeComboBox.setModel(new DefaultComboBoxModel(WoodType.values()));
        protectionPanel.add(woodTypeComboBox);

        minorityProtectionCheckBox.setText(bundle.getString("TgTreatmentMan3.minorityProtectionCheckBox.text")); // NOI18N
        protectionPanel.add(minorityProtectionCheckBox);

        minimumCoverLabel.setText(bundle.getString("TgTreatmentMan3.minimumCoverLabel.text")); // NOI18N
        protectionPanel.add(minimumCoverLabel);

        minimumCoverTextField.setText("0.0"); // NOI18N
        minimumCoverTextField.setPreferredSize(new java.awt.Dimension(26, 20));
        protectionPanel.add(minimumCoverTextField);

        protectionThicknessLabel.setText(bundle.getString("TgTreatmentMan3.protectionThicknessLabel.text")); // NOI18N
        protectionPanel.add(protectionThicknessLabel);

        protectionThicknessTextField.setText("150"); // NOI18N
        protectionPanel.add(protectionThicknessTextField);

        treatmentRulesPanel.add(protectionPanel);

        plantingPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1), bundle.getString("TgTreatmentMan3.plantingPanel.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N
        plantingPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        plantingCheckbox.setText(bundle.getString("TgTreatmentMan3.plantingCheckbox.text")); // NOI18N
        plantingPanel.add(plantingCheckbox);

        unterstoryRemovalCheckBox.setText(bundle.getString("TgTreatmentMan3.unterstoryRemovalCheckBox.text")); // NOI18N
        plantingPanel.add(unterstoryRemovalCheckBox);

        plantAtLabel.setText(bundle.getString("TgTreatmentMan3.plantAtLabel.text")); // NOI18N
        plantingPanel.add(plantAtLabel);

        plantAtTextField.setText("0.1"); // NOI18N
        plantAtTextField.setPreferredSize(new java.awt.Dimension(35, 20));
        plantingPanel.add(plantAtTextField);

        speciesCodeLabel.setText(bundle.getString("TgTreatmentMan3.speciesCodeLabel.text")); // NOI18N
        plantingPanel.add(speciesCodeLabel);

        speciesCodeTextField.setPreferredSize(new java.awt.Dimension(50, 20));
        plantingPanel.add(speciesCodeTextField);

        treatmentRulesPanel.add(plantingPanel);

        jPanel2.add(treatmentRulesPanel, java.awt.BorderLayout.NORTH);

        speciesSettingsPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 8, 5, 5));
        speciesSettingsPanel.setPreferredSize(new java.awt.Dimension(452, 150));
        speciesSettingsPanel.setLayout(new java.awt.BorderLayout());

        speciesSettingsLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        speciesSettingsLabel.setText(bundle.getString("TgTreatmentMan3.speciesSettingsLabel.text")); // NOI18N
        speciesSettingsLabel.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 0, 5, 0));
        speciesSettingsPanel.add(speciesSettingsLabel, java.awt.BorderLayout.PAGE_START);

        speciesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        speciesScrollPane.setViewportView(speciesTable);

        speciesSettingsPanel.add(speciesScrollPane, java.awt.BorderLayout.CENTER);

        jPanel2.add(speciesSettingsPanel, java.awt.BorderLayout.CENTER);

        add(jPanel2, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

private void startSimulationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startSimulationButtonActionPerformed
    applySettingsToStandRule();

    int simTime = Integer.parseInt(simulationDurationTextField.getText());
    int nSimSteps = (int) Math.ceil(Double.parseDouble(simulationDurationTextField.getText()) / st.timeStep);
    boolean dsiEnabled = useClimateDataCheckBox.isSelected();
    boolean useMortality = useMortalityCheckBox.isSelected();
    Simulation simulation = new Simulation(st, true, useMortality);
    if (dsiEnabled) {
        DatabaseEnvironmentalDataProvider environmentalDatabase = new DatabaseEnvironmentalDataProvider(userSettings.getClimateDatabase());
        final String climateScenario = (String) climateScenarioComboBox.getSelectedItem();
        EnvironmentVariables environmentalData = environmentalDatabase.environmentalDataFor(st.location, climateScenario);
        if (environmentalData.dataMissingFor(Year.of(st.year), Year.of(st.year + simTime))) {
            if (continueQuestionAnswer() == JOptionPane.NO_OPTION) {
                return;
            }
        }
        simulation = new ClimateSensitiveSimulation(st, true, useMortality, environmentalDatabase, climateScenario);
    }
    
    // TODO: http://issuetracker.intranet:20002/browse/BWIN-89 check intensity definition, type definition and competitor factor definition if the cover the range 0-200 years or 0-100m height
    // and show dialog if not

    for (Species species : st.species()) {
        logger.log(Level.INFO, "Using thinning settings:\n {0}", species.trule.thinningSettings);
    }
    for (int i = 0; i < nSimSteps; i++) {
        int time = st.timeStep;
        if (simTime < st.timeStep) {
            time = simTime;
        }
        simulation.executeStep(time, (t) -> {
            yt.enterStandDesc(t);
        });
        simTime -= st.timeStep;
    }
}//GEN-LAST:event_startSimulationButtonActionPerformed

    private int continueQuestionAnswer() {
        return JOptionPane.showConfirmDialog(
                getParent(),
                messages.getString("TgTreatmentMan3.climateData.incomplete.message"),
                messages.getString("TgTreatmentMan3.climateData.incomplete.title"),
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
    }

private void harvestingTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_harvestingTypeComboBoxActionPerformed
    if (harvestingTypeComboBox.getSelectedIndex() == 0) {
        clearingTextField.setVisible(true);
        clearingLabel.setVisible(true);
        harvestingAmountMinimumLabel.setVisible(true);
        harvestingAmountMaximumLabel.setVisible(true);
        harvestingAmountMinimumTextField.setVisible(true);
        harvestingAmountMaximumTextField.setVisible(true);
        clearingLabel.setText(messages.getString("TgTreatmentMan3.clearingLabel.text"));
        clearingTextField.setText("0.3");
    }
    if (harvestingTypeComboBox.getSelectedIndex() == 1) {
        clearingTextField.setVisible(true);
        clearingLabel.setVisible(true);
        harvestingAmountMinimumLabel.setVisible(false);
        harvestingAmountMaximumLabel.setVisible(false);
        harvestingAmountMinimumTextField.setVisible(false);
        harvestingAmountMaximumTextField.setVisible(false);
        clearingLabel.setText(messages.getString("TgTreatmentMan3.clearingLabel.regeneration.text"));
        if (st.trule.regenerationProcess.length() > 1) {
            clearingTextField.setText(st.trule.regenerationProcess);
        } else {
            clearingTextField.setText("0.7;0.4;0.2;0.0;");
        }
    }
    if (harvestingTypeComboBox.getSelectedIndex() == 2) {
        harvestingAmountMinimumLabel.setVisible(false);
        harvestingAmountMaximumLabel.setVisible(false);
        harvestingAmountMinimumTextField.setVisible(false);
        harvestingAmountMaximumTextField.setVisible(false);
        clearingTextField.setVisible(false);
        clearingLabel.setVisible(false);
    }
}//GEN-LAST:event_harvestingTypeComboBoxActionPerformed

    public void formUpdate(Stand stand) {
        loadTable();
    }

    private void loadTable() {
        useIngrowthModelCheckBox.setSelected(st.ingrowthActive);

        if (st.random.getRandomType() > 10) {
            useRandomEffectsCheckBox.setSelected(true);
        } else {
            useRandomEffectsCheckBox.setSelected(false);
        }
        for (int i = speciesData.getRowCount(); i > 0; i = i - 1) {
            speciesData.removeRow(i - 1);
        }
        String pflArten = "";
        if (st.nspecies == 1) {
            st.sp[0].trule.targetCrownPercent = 100.0;
        }
        for (Species sp : st.species()) {
            speciesData.addRow(TreatmentTableColumn.rowFor(sp).toArray());
            Double flant = Math.round(sp.trule.targetCrownPercent / (10.0)) / 10.0;
            pflArten = new StringBuilder(pflArten).append(sp.code).append("[").append(flant).append("];").toString();
        }
        if (st.status == 0) {
            speciesCodeTextField.setText(pflArten);
        }
    }

    public ComboBoxModel loadClimateScenarios() {
        final boolean climateDataAvailable = userSettings.getClimateDatabase().exists();
        useClimateDataCheckBox.setSelected(climateDataAvailable);
        useClimateDataCheckBox.setEnabled(climateDataAvailable);
        climateScenarioComboBox.setEnabled(climateDataAvailable);
        if (!climateDataAvailable) {
            return new DefaultComboBoxModel();
        }
        List<String> scenarios = new ArrayList<>();
        try (Connection connection = connectionFactory.openDBConnection(userSettings.getClimateDatabase(), "", "");
                Statement stmt = connection.createStatement()) {
            try (ResultSet rs = stmt.executeQuery("select distinct scenario from input_data")) {
                while (rs.next()) {
                    scenarios.add(rs.getString("scenario"));
                }
            }
        } catch (SQLException e) {
            logger.log(Level.SEVERE, "Problem with database", e);
        }
        return new DefaultComboBoxModel(scenarios.toArray());
    }

    public void applySettingsToStandRule() {
        if (useRandomEffectsCheckBox.isSelected()) {
            st.random.setRandomType(RandomNumber.PSEUDO_FIXED);
        } else {
            st.random.setRandomType(RandomNumber.OFF);
        }
        st.ingrowthActive = useIngrowthModelCheckBox.isSelected();
        st.riskActive = useRiskModelCheckBox.isSelected();
        st.distanceDependent = true;
// Planting rules
        st.trule.setAutoPlanting(plantingCheckbox.isSelected(), unterstoryRemovalCheckBox.isSelected(), Double.parseDouble(plantAtTextField.getText()), speciesCodeTextField.getText());
        st.trule.setSkidTrails(
                new SkidTrailRules(developmentCheckBox.isSelected(),
                        Double.parseDouble(skidtrailDistanceTextField.getText()),
                        Double.parseDouble(skidtrailWidthTextField.getText()))
        );
        developmentCheckBox.setSelected(false);
        if (st.ntrees > 0) {
            // Set thinning  and intensity
            boolean ctreesOnly = releaseOnlyCropTreesCheckBox.isSelected();

            st.trule.setThinningRegime(new ThinningRegime(
                    Double.parseDouble(thinningAmountMinimumTextField.getText()),
                    Double.parseDouble(thinningAmountMaximumTextField.getText()),
                    ctreesOnly));
            // set Harvesting Regime
            double clearFak = 0.0;
            if (harvestingTypeComboBox.getSelectedIndex() == 0) {
                clearFak = Double.parseDouble(clearingTextField.getText());
            }
            st.trule.setHarvestRegime(harvestingTypeComboBox.getSelectedIndex(), Double.parseDouble(harvestingAmountMinimumTextField.getText()),
                    Double.parseDouble(harvestingAmountMaximumTextField.getText()), clearFak, clearingTextField.getText());
            // Set nature conversation
            st.trule.setNatureProtection(Integer.parseInt(habitatTreesTextField.getText()), woodTypeComboBox.getSelectedIndex(),
                    minorityProtectionCheckBox.isSelected(), Double.parseDouble(minimumCoverTextField.getText()), Integer.parseInt(protectionThicknessTextField.getText()));
        }
        for (int rowIndex = 0; rowIndex < speciesTable.getRowCount(); rowIndex++) {
            Optional<Species> sp = st.speciesFor((Integer) (speciesTable.getValueAt(rowIndex, Code.ordinal())));
            final int row = rowIndex;
            sp.ifPresent(s -> {
                s.trule.minCropTreeHeight = Double.parseDouble((String) (speciesTable.getValueAt(row, ThinningHeight.ordinal())));
                s.trule.targetCrownPercent = Double.parseDouble((String) (speciesTable.getValueAt(row, Mixture.ordinal())));
                s.trule.targetDiameter = Double.parseDouble((String) (speciesTable.getValueAt(row, TargetD.ordinal())));
                s.trule.numberCropTreesWanted = (int) (Integer.parseInt((String) (speciesTable.getValueAt(row, CropTrees.ordinal()))) * s.trule.targetCrownPercent / 100.0);
                s.trule.thinningSettings = s.thinningSettings().with(
                        (ThinningModeName) speciesTable.getValueAt(row, TreatmentTableColumn.ThinningMode.ordinal()),
                        (String) speciesTable.getValueAt(row, TreatmentTableColumn.ThinningType.ordinal()),
                        (String) speciesTable.getValueAt(row, TreatmentTableColumn.ThinningIntensity.ordinal())
                );
                s.trule.competitorTakeOutDefinition = (String) speciesTable.getValueAt(row, TreatmentTableColumn.CompetitorCount.ordinal());
            });
        }
        double sum = 0.0;
        for (Species sp : st.species()) {
            sum += sp.trule.targetCrownPercent;
        }
        // TODO: what to do if sum is 0?
        for (Species sp : st.species()) {
            sp.trule.targetCrownPercent = 100.0 * sp.trule.targetCrownPercent / sum; //NOSONAR
        }
        loadTable();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel HeadingPanel;
    private javax.swing.JLabel clearingLabel;
    private javax.swing.JTextField clearingTextField;
    private javax.swing.JComboBox<String> climateScenarioComboBox;
    private javax.swing.JCheckBox developmentCheckBox;
    private javax.swing.JLabel habitatTreesLabel;
    private javax.swing.JTextField habitatTreesTextField;
    private javax.swing.JLabel harvestingAmountMaximumLabel;
    private javax.swing.JTextField harvestingAmountMaximumTextField;
    private javax.swing.JLabel harvestingAmountMinimumLabel;
    private javax.swing.JTextField harvestingAmountMinimumTextField;
    private javax.swing.JPanel harvestingPanel;
    private javax.swing.JComboBox harvestingTypeComboBox;
    private javax.swing.JLabel harvestingTypeLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel minimumCoverLabel;
    private javax.swing.JTextField minimumCoverTextField;
    private javax.swing.JCheckBox minorityProtectionCheckBox;
    private javax.swing.JLabel plantAtLabel;
    private javax.swing.JTextField plantAtTextField;
    private javax.swing.JCheckBox plantingCheckbox;
    private javax.swing.JPanel plantingPanel;
    private javax.swing.JPanel protectionPanel;
    private javax.swing.JLabel protectionThicknessLabel;
    private javax.swing.JTextField protectionThicknessTextField;
    private javax.swing.JCheckBox releaseOnlyCropTreesCheckBox;
    private javax.swing.JLabel scenarioSettingsHeadingLabel;
    private javax.swing.JLabel simulationDurationLabel;
    private javax.swing.JTextField simulationDurationTextField;
    private javax.swing.JLabel simulationDurationUnitLabel;
    private javax.swing.JLabel skidtrailDistanceLabel;
    private javax.swing.JTextField skidtrailDistanceTextField;
    private javax.swing.JLabel skidtrailWidthLabel;
    private javax.swing.JTextField skidtrailWidthTextField;
    private javax.swing.JPanel skidtrailsPanel;
    private javax.swing.JLabel speciesCodeLabel;
    private javax.swing.JTextField speciesCodeTextField;
    private javax.swing.JScrollPane speciesScrollPane;
    private javax.swing.JLabel speciesSettingsLabel;
    private javax.swing.JPanel speciesSettingsPanel;
    private javax.swing.JTable speciesTable;
    private javax.swing.JButton startSimulationButton;
    private javax.swing.JLabel thinningAmountMaximumLabel;
    private javax.swing.JTextField thinningAmountMaximumTextField;
    private javax.swing.JLabel thinningAmountMinimumLabel;
    private javax.swing.JTextField thinningAmountMinimumTextField;
    private javax.swing.JPanel thinningPanel;
    private javax.swing.JPanel treatmentRulesPanel;
    private javax.swing.JCheckBox unterstoryRemovalCheckBox;
    private javax.swing.JCheckBox useClimateDataCheckBox;
    private javax.swing.JCheckBox useIngrowthModelCheckBox;
    private javax.swing.JCheckBox useMortalityCheckBox;
    private javax.swing.JCheckBox useRandomEffectsCheckBox;
    private javax.swing.JCheckBox useRiskModelCheckBox;
    private javax.swing.JComboBox woodTypeComboBox;
    // End of variables declaration//GEN-END:variables

}
