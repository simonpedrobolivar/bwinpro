/* http://www.nw-fva.de
   Version 07-11-2008

   (c) 2002 Juergen Nagel, Northwest German Forest Research Station, 
       Grätzelstr.2, 37079 Göttingen, Germany
       E-Mail: Juergen.Nagel@nw-fva.de
 
This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT  WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
 */
package forestsimulator.standsimulation;

import java.awt.Frame;
import treegross.base.*;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.ProcessingInstruction;
import org.jdom.output.XMLOutputter;
import org.jdom.input.*;
import java.io.*;
import java.text.NumberFormat;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import org.jdom.JDOMException;
import org.jdom.output.Format;
import treegross.base.thinning.HeightBasedThinning;
import treegross.dynamic.siteindex.DynamicSiteIndexCalculator;

/**
 *
 * @author nagel
 */
public class TgSpeciesManXML extends javax.swing.JDialog {

    private static final Logger logger = Logger.getLogger(TgSpeciesManXML.class.getName());
    private static final ResourceBundle bundle = ResourceBundle.getBundle("forestsimulator/gui");
    private final List<SpeciesDef> spd = new ArrayList<>();
    private final DefaultListModel listModel = new DefaultListModel();
    private final File urlname;

    public TgSpeciesManXML(Frame parent, boolean modal, File workdir, String fn) {
        super(parent, modal);
        initComponents();
        urlname = new File(new File(workdir, "models"), fn);
        loadXMLFile();
        if (!spd.isEmpty()) {
            loadTable(spd.get(0));
            speciesList.setSelectedIndex(0);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        generalSettingsLabel = new javax.swing.JLabel();
        modelRegionLabel = new javax.swing.JLabel();
        modelRegionTextField = new javax.swing.JTextField();
        randomnessCheckBox = new javax.swing.JCheckBox();
        ingrowthCheckBox = new javax.swing.JCheckBox();
        deadWoodModuleCheckBox = new javax.swing.JCheckBox();
        timeStepLabel = new javax.swing.JLabel();
        timeStepTextField = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        authorTextField = new javax.swing.JTextField();
        dateLabel = new javax.swing.JLabel();
        dateTextField = new javax.swing.JTextField();
        lastUpdateLabel = new javax.swing.JLabel();
        lastUpdateTextField = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        descriptionTextArea = new javax.swing.JTextArea();
        literatureTextField = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        sortingModuleLabel = new javax.swing.JLabel();
        sortingModuleTextField = new javax.swing.JTextField();
        biomassLabel = new javax.swing.JLabel();
        biomassTextField = new javax.swing.JTextField();
        deadWoodModuleLabel = new javax.swing.JLabel();
        deadWoodModuleTextField = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        selectedSpeciesLabel = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        speciesDefinitionTable = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        saveButton = new javax.swing.JButton();
        saveAsNewButton = new javax.swing.JButton();
        saveSettingsButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        speciesListPanel = new javax.swing.JPanel();
        treeSpeciesLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        speciesList = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("forestsimulator/gui"); // NOI18N
        setTitle(bundle.getString("TgSpeciesManXML.title")); // NOI18N
        setBackground(java.awt.Color.white);

        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        generalSettingsLabel.setText(bundle.getString("TgSpeciesManXML.generalSettingsLabel.text")); // NOI18N
        jPanel6.add(generalSettingsLabel);

        modelRegionLabel.setText(bundle.getString("TgSpeciesManXML.modelRegionLabel.text")); // NOI18N
        jPanel6.add(modelRegionLabel);

        modelRegionTextField.setText(bundle.getString("TgSpeciesManXML.modelRegionTextField.text")); // NOI18N
        modelRegionTextField.setPreferredSize(new java.awt.Dimension(259, 20));
        jPanel6.add(modelRegionTextField);

        randomnessCheckBox.setSelected(true);
        randomnessCheckBox.setText(bundle.getString("TgSpeciesManXML.randomnessCheckBox.text")); // NOI18N
        jPanel6.add(randomnessCheckBox);

        ingrowthCheckBox.setText(bundle.getString("TgSpeciesManXML.ingrowthCheckBox.text")); // NOI18N
        jPanel6.add(ingrowthCheckBox);

        deadWoodModuleCheckBox.setText(bundle.getString("TgSpeciesManXML.deadWoodModuleCheckBox.text")); // NOI18N
        jPanel6.add(deadWoodModuleCheckBox);

        timeStepLabel.setText(bundle.getString("TgSpeciesManXML.timeStepLabel.text")); // NOI18N
        jPanel6.add(timeStepLabel);

        timeStepTextField.setText(bundle.getString("TgSpeciesManXML.timeStepTextField.text")); // NOI18N
        timeStepTextField.setPreferredSize(new java.awt.Dimension(22, 20));
        jPanel6.add(timeStepTextField);

        jPanel4.add(jPanel6, java.awt.BorderLayout.NORTH);

        jPanel7.setLayout(new java.awt.BorderLayout());

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        authorTextField.setText(bundle.getString("TgSpeciesManXML.authorTextField.text")); // NOI18N
        authorTextField.setToolTipText(bundle.getString("TgSpeciesManXML.authorTextField.toolTipText")); // NOI18N
        authorTextField.setPreferredSize(new java.awt.Dimension(232, 20));
        jPanel8.add(authorTextField);

        dateLabel.setText(bundle.getString("TgSpeciesManXML.dateLabel.text")); // NOI18N
        jPanel8.add(dateLabel);

        dateTextField.setText(bundle.getString("TgSpeciesManXML.dateTextField.text")); // NOI18N
        dateTextField.setPreferredSize(new java.awt.Dimension(80, 20));
        jPanel8.add(dateTextField);

        lastUpdateLabel.setText(bundle.getString("TgSpeciesManXML.lastUpdateLabel.text")); // NOI18N
        lastUpdateLabel.setToolTipText(bundle.getString("TgSpeciesManXML.lastUpdateLabel.toolTipText")); // NOI18N
        jPanel8.add(lastUpdateLabel);

        lastUpdateTextField.setText(bundle.getString("TgSpeciesManXML.lastUpdateTextField.text")); // NOI18N
        lastUpdateTextField.setPreferredSize(new java.awt.Dimension(80, 20));
        jPanel8.add(lastUpdateTextField);

        jPanel7.add(jPanel8, java.awt.BorderLayout.NORTH);

        descriptionTextArea.setColumns(20);
        descriptionTextArea.setRows(5);
        descriptionTextArea.setToolTipText(bundle.getString("TgSpeciesManXML.descriptionTextArea.toolTipText")); // NOI18N
        descriptionTextArea.setPreferredSize(new java.awt.Dimension(164, 74));
        jScrollPane4.setViewportView(descriptionTextArea);

        jPanel7.add(jScrollPane4, java.awt.BorderLayout.CENTER);

        literatureTextField.setText(bundle.getString("TgSpeciesManXML.literatureTextField.text")); // NOI18N
        literatureTextField.setToolTipText(bundle.getString("TgSpeciesManXML.literatureTextField.toolTipText")); // NOI18N
        jPanel7.add(literatureTextField, java.awt.BorderLayout.PAGE_END);

        jPanel4.add(jPanel7, java.awt.BorderLayout.CENTER);

        jPanel9.setLayout(new java.awt.GridLayout(1, 6));

        sortingModuleLabel.setText(bundle.getString("TgSpeciesManXML.sortingModuleLabel.text")); // NOI18N
        jPanel9.add(sortingModuleLabel);

        sortingModuleTextField.setText(bundle.getString("TgSpeciesManXML.sortingModuleTextField.text")); // NOI18N
        jPanel9.add(sortingModuleTextField);

        biomassLabel.setText(bundle.getString("TgSpeciesManXML.biomassLabel.text")); // NOI18N
        jPanel9.add(biomassLabel);

        biomassTextField.setText(bundle.getString("TgSpeciesManXML.biomassTextField.text")); // NOI18N
        jPanel9.add(biomassTextField);

        deadWoodModuleLabel.setText(bundle.getString("TgSpeciesManXML.deadWoodModuleLabel.text")); // NOI18N
        jPanel9.add(deadWoodModuleLabel);

        deadWoodModuleTextField.setText(bundle.getString("TgSpeciesManXML.deadWoodModuleTextField.text")); // NOI18N
        jPanel9.add(deadWoodModuleTextField);

        jPanel4.add(jPanel9, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jPanel4, java.awt.BorderLayout.NORTH);

        jPanel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        jPanel1.setLayout(new java.awt.BorderLayout(5, 5));

        selectedSpeciesLabel.setText(bundle.getString("TgSpeciesManXML.selectedSpeciesLabel.text")); // NOI18N
        jPanel1.add(selectedSpeciesLabel, java.awt.BorderLayout.PAGE_START);

        jPanel5.setLayout(new java.awt.BorderLayout());

        jScrollPane2.setAutoscrolls(true);

        speciesDefinitionTable.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        speciesDefinitionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Variable", "XML Code"
            }
        ));
        jScrollPane2.setViewportView(speciesDefinitionTable);

        jPanel5.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel5, java.awt.BorderLayout.CENTER);

        saveButton.setText(bundle.getString("TgSpeciesManXML.saveButton.text")); // NOI18N
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        saveAsNewButton.setText(bundle.getString("TgSpeciesManXML.saveAsNewButton.text")); // NOI18N
        saveAsNewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsNewButtonActionPerformed(evt);
            }
        });

        saveSettingsButton.setText(bundle.getString("TgSpeciesManXML.saveSettingsButton.text")); // NOI18N
        saveSettingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveSettingsButtonActionPerformed(evt);
            }
        });

        deleteButton.setText(bundle.getString("TgSpeciesManXML.deleteButton.text")); // NOI18N
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(saveButton)
                .addGap(15, 15, 15)
                .addComponent(saveAsNewButton)
                .addGap(21, 21, 21)
                .addComponent(deleteButton)
                .addGap(16, 16, 16)
                .addComponent(saveSettingsButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveSettingsButton)
                    .addComponent(saveButton)
                    .addComponent(saveAsNewButton)
                    .addComponent(deleteButton))
                .addGap(37, 37, 37))
        );

        jPanel1.add(jPanel3, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        speciesListPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        speciesListPanel.setPreferredSize(new java.awt.Dimension(100, 600));
        speciesListPanel.setLayout(new java.awt.BorderLayout(5, 5));

        treeSpeciesLabel.setText(bundle.getString("TgSpeciesManXML.treeSpeciesLabel.text")); // NOI18N
        speciesListPanel.add(treeSpeciesLabel, java.awt.BorderLayout.NORTH);

        speciesList.setModel(listModel);
        speciesList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                speciesListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(speciesList);

        speciesListPanel.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(speciesListPanel, java.awt.BorderLayout.WEST);

        setSize(new java.awt.Dimension(1196, 820));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        int m = speciesList.getSelectedIndex();
        spd.remove(m);
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        int m = speciesList.getSelectedIndex(); //get SelectedIndex from List
        saveTable(spd.get(m));
    }//GEN-LAST:event_saveButtonActionPerformed

    private void speciesListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_speciesListValueChanged
        int m = speciesList.getSelectedIndex(); //get SelectedIndex from List
        loadTable(spd.get(m));

    }//GEN-LAST:event_speciesListValueChanged

    private void saveSettingsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveSettingsButtonActionPerformed
        saveXMLFile();
        dispose();
    }//GEN-LAST:event_saveSettingsButtonActionPerformed

    private void saveAsNewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsNewButtonActionPerformed
        SpeciesDef speciesDefinition = new SpeciesDef();
        saveTable(speciesDefinition);
        spd.add(speciesDefinition);

        renewList();
    }//GEN-LAST:event_saveAsNewButtonActionPerformed

    private void renewList() {
        listModel.removeAllElements();
        listModel.clear();
        spd.forEach((speciesDef) -> {
            listModel.addElement(speciesDef.shortName);
        });
    }

    private void saveTable(SpeciesDef speciesDefinition) {
        SpeciesDefMap sdm = new SpeciesDefMap();
        speciesDefinition.code = Integer.parseInt(getDefinedValueAt(0));
        speciesDefinition.shortName = getDefinedValueAt(1);
        speciesDefinition.longName = getDefinedValueAt(2);
        speciesDefinition.latinName = getDefinedValueAt(3);
        speciesDefinition.internalCode = Integer.parseInt(getDefinedValueAt(4));
        speciesDefinition.codeGroup = Integer.parseInt(getDefinedValueAt(5));
        speciesDefinition.handledLikeCode = Integer.parseInt(getDefinedValueAt(6));
        speciesDefinition.heightCurve = getInt(getDefinedValueAt(7));
        speciesDefinition.uniformHeightCurveXML = sdm.initTGFunction(getDefinedValueAt(8));
        speciesDefinition.heightVariationXML = sdm.initTGFunction(getDefinedValueAt(9));
        speciesDefinition.diameterDistributionXML = sdm.initTGFunction(getDefinedValueAt(10));
        speciesDefinition.volumeFunctionXML = sdm.initTGFunction(getDefinedValueAt(11));
        speciesDefinition.stemVolumeFunctionXML = getDefinedValueAt(12);
        speciesDefinition.crownwidthXML = sdm.initTGFunction(getDefinedValueAt(13));
        speciesDefinition.crownbaseXML = sdm.initTGFunction(getDefinedValueAt(14));
        speciesDefinition.crownType = getInt(getDefinedValueAt(15));
        speciesDefinition.siteindexXML = sdm.initTGFunction(getDefinedValueAt(16));
        speciesDefinition.siteindexHeightXML = sdm.initTGFunction(getDefinedValueAt(17));
        speciesDefinition.potentialHeightIncrementXML = sdm.initTGFunction(getDefinedValueAt(18));
        speciesDefinition.heightIncrementXML = sdm.initTGFunction(getDefinedValueAt(19));
        speciesDefinition.heightIncrementError = getDouble(getDefinedValueAt(20));
        speciesDefinition.diameterIncrementXML = sdm.initTGFunction(getDefinedValueAt(21));
        speciesDefinition.diameterIncrementError = getDouble(getDefinedValueAt(22));
        speciesDefinition.maximumDensityXML = sdm.initTGFunction(getDefinedValueAt(23));
        speciesDefinition.maximumAge = getInt(getDefinedValueAt(24));
        speciesDefinition.ingrowthXML = getDefinedValueAt(25);
        speciesDefinition.decayXML = sdm.initTGFunction(getDefinedValueAt(26));
        speciesDefinition.targetDiameter = getDouble(getDefinedValueAt(27));
        speciesDefinition.heightOfThinningStart = getDouble(getDefinedValueAt(28));
        speciesDefinition.moderateThinning = new HeightBasedThinning(getDefinedValueAt(29));
        speciesDefinition.colorXML = getDefinedValueAt(30);
        speciesDefinition.competitionXML = getDefinedValueAt(31);
        speciesDefinition.taperFunctionXML = getDefinedValueAt(32);
        speciesDefinition.coarseRootBiomass = getDefinedValueAt(33);
        speciesDefinition.smallRootBiomass = getDefinedValueAt(34);
        speciesDefinition.fineRootBiomass = getDefinedValueAt(35);
        speciesDefinition.totalRootBiomass = getDefinedValueAt(36);
        speciesDefinition.cropTreeNumber = getInt(getDefinedValueAt(37));
        speciesDefinition.dsiCalculator = new DynamicSiteIndexCalculator(sdm.initTGFunction(getDefinedValueAt(38)));
    }

    private String getDefinedValueAt(int row) {
        return speciesDefinitionTable.getValueAt(row, 1).toString();
    }

    private int getInt(String s) {
        try {
            return Integer.parseInt(s);
        } catch (NumberFormatException e) {
            logger.log(Level.FINE, "Could not parse number.", e);
            return -9;
        }
    }

    private double getDouble(String s) {
        try {
            return Double.parseDouble(s);
        } catch (NumberFormatException e) {
            logger.log(Level.FINE, "Could not parse number.", e);
            return -9;
        }
    }

    private void loadXMLFile() {
        SpeciesDefMap sdm = new SpeciesDefMap();
        spd.clear();
        try {
            SAXBuilder builder = new SAXBuilder();
            Document doc = builder.build(urlname);
            Element sortimente = doc.getRootElement();
            List<Element> Sortiment = sortimente.getChildren("SpeciesDefinition");
            Sortiment.stream().map((def) -> {
                return sdm.speciesDefinitionFrom(def);
            }).forEachOrdered((speciesDefinition) -> {
                spd.add(speciesDefinition);
            });

            Element einstellung = doc.getRootElement();
            List<Element> einstellungen = einstellung.getChildren("GeneralSettings");

            // load the first set of GeneralSettings
            for (Element eingestellt : einstellungen) {
                modelRegionTextField.setText(eingestellt.getChild("ModelRegion").getText());
                randomnessCheckBox.setSelected(Boolean.parseBoolean(eingestellt.getChild("ErrorComponent").getText()));
                ingrowthCheckBox.setSelected(Boolean.parseBoolean(eingestellt.getChild("IngrowthModul").getText()));
                deadWoodModuleCheckBox.setSelected(Boolean.parseBoolean(eingestellt.getChild("DeadwoodModul").getText()));
                timeStepTextField.setText(getChildTextOf(eingestellt, "TimeStep", "5"));
                authorTextField.setText(getChildTextOf(eingestellt, "Author", "add author"));
                dateTextField.setText(getChildTextOf(eingestellt, "FirstDate", "add date"));
                lastUpdateTextField.setText(getChildTextOf(eingestellt, "LastChange", "add date"));
                literatureTextField.setText(getChildTextOf(eingestellt, "Literature", "add literature"));
                descriptionTextArea.setText(getChildTextOf(eingestellt, "Description", "add model info"));
                sortingModuleTextField.setText(getChildTextOf(eingestellt, "SortingModul", "none"));
                biomassTextField.setText(getChildTextOf(eingestellt, "BiomassModul", "none"));
                deadWoodModuleTextField.setText(getChildTextOf(eingestellt, "DebriswoodModul", "none"));
                break;
            }
        } catch (IOException | NumberFormatException | JDOMException e) {
            logger.log(Level.SEVERE, "Problem loading settings.", e);
        }
        renewList();
    }

    private String getChildTextOf(Element eingestellt, String childName, String defaultValue) {
        Element ts = eingestellt.getChild(childName);
        if (ts == null) {
            return defaultValue;
        }
        return ts.getText();
    }

    private void saveXMLFile() {
        NumberFormat f = NumberFormat.getInstance(new Locale("en", "US"));
        f.setMaximumFractionDigits(2);
        f.setMinimumFractionDigits(2);
        Document doc = new Document();
        Element rootElt = new Element("ForestSimulatorSettings");
        ProcessingInstruction pi = new ProcessingInstruction("xml-stylesheet",
                "type=\"text/xsl\" href=\"ForestSimulatorSettings.xsl\"");
        doc.addContent(pi);
        doc.setRootElement(rootElt);
        Element parent = new Element("GeneralSettings");
        addString(parent, "ModelRegion", modelRegionTextField.getText());
        addString(parent, "ErrorComponent", String.valueOf(randomnessCheckBox.isSelected()));
        addString(parent, "IngrowthModul", String.valueOf(ingrowthCheckBox.isSelected()));
        addString(parent, "DeadwoodModul", String.valueOf(deadWoodModuleCheckBox.isSelected()));
        addString(parent, "TimeStep", Integer.parseInt(timeStepTextField.getText().trim()));
        addString(parent, "Author", authorTextField.getText());
        addString(parent, "FirstDate", dateTextField.getText());
        addString(parent, "LastChange", lastUpdateTextField.getText());
        addString(parent, "Literature", literatureTextField.getText());
        addString(parent, "Description", descriptionTextArea.getText());
        addString(parent, "SortingModul", sortingModuleTextField.getText());
        addString(parent, "BiomassModul", biomassTextField.getText());
        addString(parent, "DebriswoodModul", deadWoodModuleTextField.getText());
        rootElt.addContent(parent);

        spd.stream().map((speciesDefinition) -> {
            Element speciesDefinitionElement = new Element("SpeciesDefinition");
            addString(speciesDefinitionElement, "Code", speciesDefinition.code);
            addString(speciesDefinitionElement, "ShortName", speciesDefinition.shortName);
            addString(speciesDefinitionElement, "LongName", speciesDefinition.longName);
            addString(speciesDefinitionElement, "LatinName", speciesDefinition.latinName);
            addString(speciesDefinitionElement, "InternalCode", speciesDefinition.internalCode);
            addString(speciesDefinitionElement, "CodeGroup", speciesDefinition.codeGroup);
            addString(speciesDefinitionElement, "HandledLikeCode", speciesDefinition.handledLikeCode);
            addString(speciesDefinitionElement, "HeightCurve", speciesDefinition.heightCurve);
            addString(speciesDefinitionElement, "UniformHeightCurveXML", speciesDefinition.uniformHeightCurveXML.toString());
            addString(speciesDefinitionElement, "HeightVariation", speciesDefinition.heightVariationXML.toString());
            addString(speciesDefinitionElement, "DiameterDistributionXML", speciesDefinition.diameterDistributionXML.toString());
            addString(speciesDefinitionElement, "VolumeFunctionXML", speciesDefinition.volumeFunctionXML.toString());
            addString(speciesDefinitionElement, "StemVolumeFunction", speciesDefinition.stemVolumeFunctionXML);
            addString(speciesDefinitionElement, "Crownwidth", speciesDefinition.crownwidthXML.toString());
            addString(speciesDefinitionElement, "Crownbase", speciesDefinition.crownbaseXML.toString());
            addString(speciesDefinitionElement, "CrownType", speciesDefinition.crownType);
            addString(speciesDefinitionElement, "SiteIndex", speciesDefinition.siteindexXML.toString());
            addString(speciesDefinitionElement, "SiteIndexHeight", speciesDefinition.siteindexHeightXML.toString());
            addString(speciesDefinitionElement, "DynamicSiteIndex", speciesDefinition.dsiCalculator.functionText());
            addString(speciesDefinitionElement, "PotentialHeightIncrement", speciesDefinition.potentialHeightIncrementXML.toString());
            addString(speciesDefinitionElement, "HeightIncrement", speciesDefinition.heightIncrementXML.toString());
            addString(speciesDefinitionElement, "HeightIncrementError", Double.toString(speciesDefinition.heightIncrementError));
            addString(speciesDefinitionElement, "DiameterIncrement", speciesDefinition.diameterIncrementXML.toString());
            addString(speciesDefinitionElement, "DiameterIncrementError", Double.toString(speciesDefinition.diameterIncrementError));
            addString(speciesDefinitionElement, "MaximumDensity", speciesDefinition.maximumDensityXML.toString());
            addString(speciesDefinitionElement, "CropTreeNumber", speciesDefinition.cropTreeNumber);
            addString(speciesDefinitionElement, "MaximumAge", speciesDefinition.maximumAge);
            addString(speciesDefinitionElement, "Ingrowth", speciesDefinition.ingrowthXML);
            addString(speciesDefinitionElement, "Decay", speciesDefinition.decayXML.toString());
            addString(speciesDefinitionElement, "TargetDiameter", Double.toString(speciesDefinition.targetDiameter));
            addString(speciesDefinitionElement, "HeightOfThinningStart", Double.toString(speciesDefinition.heightOfThinningStart));
            addString(speciesDefinitionElement, "ModerateThinning", speciesDefinition.moderateThinning.definition());
            addString(speciesDefinitionElement, "Color", speciesDefinition.colorXML);
            addString(speciesDefinitionElement, "Competition", speciesDefinition.competitionXML);
            addString(speciesDefinitionElement, "TaperFunction", speciesDefinition.taperFunctionXML);
            addString(speciesDefinitionElement, "CoarseRootBiomass", speciesDefinition.coarseRootBiomass);
            addString(speciesDefinitionElement, "SmallRootBiomass", speciesDefinition.smallRootBiomass);
            addString(speciesDefinitionElement, "FineRootBiomass", speciesDefinition.fineRootBiomass);
            addString(speciesDefinitionElement, "TotalRootBiomass", speciesDefinition.totalRootBiomass);
            return speciesDefinitionElement;
        }).forEachOrdered((speciesDefinitionElement) -> {
            rootElt.addContent(speciesDefinitionElement);
        });
        try (FileOutputStream result = new FileOutputStream(urlname)) {
            XMLOutputter outputter = new XMLOutputter();
            outputter.setFormat(Format.getPrettyFormat());
            outputter.output(doc, result);
        } catch (IOException e) {
            logger.log(Level.SEVERE, "Saving settings XML failed.", e);
        }
    }

    private Element addString(Element elt, String variable, String text) {
        Element var = new Element(variable);
        var.addContent(text);
        elt.addContent(var);
        return elt;
    }

    private Element addString(Element elt, String variable, int value) {
        return addString(elt, variable, String.valueOf(value));
    }

    private void loadTable(SpeciesDef speciesDefinition) {
        setVariableForSpecies("TgSpeciesManXML.definition.speciesCode.label", speciesDefinition.code, 0);
        setVariableForSpecies("TgSpeciesManXML.definition.shortName.label", speciesDefinition.shortName, 1);
        setVariableForSpecies("TgSpeciesManXML.definition.longName.label", speciesDefinition.longName, 2);
        setVariableForSpecies("TgSpeciesManXML.definition.latinName.label", speciesDefinition.latinName, 3);
        setVariableForSpecies("TgSpeciesManXML.definition.internalCode.label", speciesDefinition.internalCode, 4);
        setVariableForSpecies("TgSpeciesManXML.definition.groupCode.label", speciesDefinition.codeGroup, 5);
        setVariableForSpecies("TgSpeciesManXML.definition.handledLikeCode.label", speciesDefinition.handledLikeCode, 6);
        setVariableForSpecies("TgSpeciesManXML.definition.heightCurce.label", speciesDefinition.heightCurve, 7);
        setVariableForSpecies("TgSpeciesManXML.definition.uniformHeightCurve.label", speciesDefinition.uniformHeightCurveXML, 8);
        setVariableForSpecies("TgSpeciesManXML.definition.heightVariation.label", speciesDefinition.heightVariationXML, 9);
        setVariableForSpecies("TgSpeciesManXML.definition.diameterDistribution.label", speciesDefinition.diameterDistributionXML, 10);
        setVariableForSpecies("TgSpeciesManXML.definition.volumeFunction.label", speciesDefinition.volumeFunctionXML, 11);
        setVariableForSpecies("TgSpeciesManXML.definition.stemVolumeFunction.label", speciesDefinition.stemVolumeFunctionXML, 12);
        setVariableForSpecies("TgSpeciesManXML.definition.crownWidth.label", speciesDefinition.crownwidthXML, 13);
        setVariableForSpecies("TgSpeciesManXML.definition.crownBase.label", speciesDefinition.crownbaseXML, 14);
        setVariableForSpecies("TgSpeciesManXML.definition.crownType.label", speciesDefinition.crownType, 15);
        setVariableForSpecies("TgSpeciesManXML.definition.siteIndex.label", speciesDefinition.siteindexXML, 16);
        setVariableForSpecies("TgSpeciesManXML.definition.siteIndexHeight.label", speciesDefinition.siteindexHeightXML, 17);
        setVariableForSpecies("TgSpeciesManXML.definition.potentialHeightIncrement.label", speciesDefinition.potentialHeightIncrementXML, 18);
        setVariableForSpecies("TgSpeciesManXML.definition.heightIncrement.label", speciesDefinition.heightIncrementXML, 19);
        setVariableForSpecies("TgSpeciesManXML.definition.heightIncrementError.label", speciesDefinition.heightIncrementError, 20);
        setVariableForSpecies("TgSpeciesManXML.definition.diameterIncrement.label", speciesDefinition.diameterIncrementXML, 21);
        setVariableForSpecies("TgSpeciesManXML.definition.diameterIncrementError.label", speciesDefinition.diameterIncrementError, 22);
        setVariableForSpecies("TgSpeciesManXML.definition.maximumDensity.label", speciesDefinition.maximumDensityXML, 23);
        setVariableForSpecies("TgSpeciesManXML.definition.maximumAge.label", speciesDefinition.maximumAge, 24);
        setVariableForSpecies("TgSpeciesManXML.definition.ingrowth.label", speciesDefinition.ingrowthXML, 25);
        setVariableForSpecies("TgSpeciesManXML.definition.decay.label", speciesDefinition.decayXML, 26);
        setVariableForSpecies("TgSpeciesManXML.definition.targetDiameter.label", speciesDefinition.targetDiameter, 27);
        setVariableForSpecies("TgSpeciesManXML.definition.heightOfThinningStart.label", speciesDefinition.heightOfThinningStart, 28);
        setVariableForSpecies("TgSpeciesManXML.definition.moderateThinning.label", speciesDefinition.moderateThinning.definition(), 29);
        setVariableForSpecies("TgSpeciesManXML.definition.color.label", speciesDefinition.colorXML, 30);
        setVariableForSpecies("TgSpeciesManXML.definition.competition.label", speciesDefinition.competitionXML, 31);
        setVariableForSpecies("TgSpeciesManXML.definition.taperFunction.label", speciesDefinition.taperFunctionXML, 32);
        setVariableForSpecies("TgSpeciesManXML.definition.coarseRootBiomass.label", speciesDefinition.coarseRootBiomass, 33);
        setVariableForSpecies("TgSpeciesManXML.definition.smallRootBiomass.label", speciesDefinition.smallRootBiomass, 34);
        setVariableForSpecies("TgSpeciesManXML.definition.fineRootBiomass.label", speciesDefinition.fineRootBiomass, 35);
        setVariableForSpecies("TgSpeciesManXML.definition.totalRootBiomass.label", speciesDefinition.totalRootBiomass, 36);
        setVariableForSpecies("TgSpeciesManXML.definition.cropTreeNumber.label", speciesDefinition.cropTreeNumber, 37);
        setVariableForSpecies("TgSpeciesManXML.definition.dynamicSiteIndex.label", speciesDefinition.dsiCalculator.functionText(), 38);
    }

    private void setVariableForSpecies(String labelKey, Object value, int row) {
        speciesDefinitionTable.setValueAt(bundle.getString(labelKey), row, 0);
        speciesDefinitionTable.setValueAt(value, row, 1);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField authorTextField;
    private javax.swing.JLabel biomassLabel;
    private javax.swing.JTextField biomassTextField;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JTextField dateTextField;
    private javax.swing.JCheckBox deadWoodModuleCheckBox;
    private javax.swing.JLabel deadWoodModuleLabel;
    private javax.swing.JTextField deadWoodModuleTextField;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTextArea descriptionTextArea;
    private javax.swing.JLabel generalSettingsLabel;
    private javax.swing.JCheckBox ingrowthCheckBox;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lastUpdateLabel;
    private javax.swing.JTextField lastUpdateTextField;
    private javax.swing.JTextField literatureTextField;
    private javax.swing.JLabel modelRegionLabel;
    private javax.swing.JTextField modelRegionTextField;
    private javax.swing.JCheckBox randomnessCheckBox;
    private javax.swing.JButton saveAsNewButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton saveSettingsButton;
    private javax.swing.JLabel selectedSpeciesLabel;
    private javax.swing.JLabel sortingModuleLabel;
    private javax.swing.JTextField sortingModuleTextField;
    private javax.swing.JTable speciesDefinitionTable;
    private javax.swing.JList speciesList;
    private javax.swing.JPanel speciesListPanel;
    private javax.swing.JLabel timeStepLabel;
    private javax.swing.JTextField timeStepTextField;
    private javax.swing.JLabel treeSpeciesLabel;
    // End of variables declaration//GEN-END:variables

}
